{"device":"Programming","url":"http:\/\/makeprojects.com\/Project\/Servos+Unscrambled\/1372\/1","guide":{"author":{"text":"Steven Robert Cypherd","userid":3592},"categories":["Programming","Gadgets"],"conclusion":"<p>Servos are fun!<\/p>","difficulty":"Easy","documents":[],"flags":[{"title":"User-Contributed Project","flagid":"GUIDE_USER_CONTRIBUTED","text":"This project guide is not managed by MAKE staff."}],"guideid":1372,"image":{"imageid":27821,"text":"http:\/\/guide-images.makeprojects.org\/igi\/xBsdNPAjAxZAjdZO"},"introduction":"<p>Servos bring life to our ideas. Servos can be mysterious, but in fact they are very simple. Servos use a simple electronic pulse to tell them what angle you want them to go to. It is electronic but not digital. There are digital servos and they are different than standard servos. Pulses are electronic, but they are part of our digital world. The abbreviation for microseconds is &quot;us&quot;. The abbreviation for milliseconds is &quot;ms&quot;. See pictures below.<\/p>\n\n<p>I am using a standard servo as an example.<\/p>\n\n<p>Servo inputs use pulses measured in microseconds (us) so that you have fine control over the angle you want the servo to go to. Microseconds are part of the language of microprocessors<wbr \/>, not people. Functions that deal with microseconds do so in the way they were programmed.<\/p>\n\n<p>People get scrambled up because functions like <tt>pulsout<\/tt> do not work the way they think they should. Remember they are made for the system they are running on. Read your manual. Most <tt>pulsout<\/tt> functions are called like this: <tt>pulsout pin, time<\/tt>. Time is the number of microseconds in each unit that will make up the pulse, not an actual time or angle. See pictures below.<\/p>\n\n<p><tt>Pulsout<\/tt> can be different on different processors in the same language because it is based on the clock speed of the processor. Also, it can be different in different versions of the same language. Read your manual. I think we should tell the companies to standardize functions like <tt>pulsout<\/tt>. It would make servos much more fun.<\/p>\n\n<p>Servos from their Radio Control heritage need a stream of pulses about every 20 milliseconds or so for about ten times of the same pulse to get them to recognize that it is the angle you want them to go to. In your program just set up a loop to send a train of pulses to the servo when you first set it to each new angle. After that you only need to re-fresh you servo about every 30-50 milliseconds or as needed by your servo.<\/p>\n\n<p>I make a constant of my time value like 28x2_TIME = 5. I state the maker, processor, speed and language version in a comment just so I know what I am using. This can be a nasty bug in a program to find.<\/p>\n\n<p>For reading sensors like the Sharp rangefinders you should not use a servo command that constantly updates the servo position every 20 microseconds or so. Why? Because the sensor needs time to calculate the distance reading and to update its output. The servo needs to be steady to do this. Once you get good data from the sensor then you can move the servo. Try it. Use the <tt>pulsout<\/tt> command to move the servo to the next scan point. Then give about 20-50 microseconds pause for the sensor to update its output and then read the sensor. You should get good data this way. Digital and analogue rangefinders use the same method for reading distance and only differ in how you read the device.<\/p>\n\n<p>See table below.<\/p>","introduction_rendered":"<p>Servos bring life to our ideas. Servos can be mysterious, but in fact they are very simple. Servos use a simple electronic pulse to tell them what angle you want them to go to. It is electronic but not digital. There are digital servos and they are different than standard servos. Pulses are electronic, but they are part of our digital world. The abbreviation for microseconds is &quot;us&quot;. The abbreviation for milliseconds is &quot;ms&quot;. See pictures below.<\/p>\n\n<p>I am using a standard servo as an example.<\/p>\n\n<p>Servo inputs use pulses measured in microseconds (us) so that you have fine control over the angle you want the servo to go to. Microseconds are part of the language of microprocessors<wbr \/>, not people. Functions that deal with microseconds do so in the way they were programmed.<\/p>\n\n<p>People get scrambled up because functions like <tt>pulsout<\/tt> do not work the way they think they should. Remember they are made for the system they are running on. Read your manual. Most <tt>pulsout<\/tt> functions are called like this: <tt>pulsout pin, time<\/tt>. Time is the number of microseconds in each unit that will make up the pulse, not an actual time or angle. See pictures below.<\/p>\n\n<p><tt>Pulsout<\/tt> can be different on different processors in the same language because it is based on the clock speed of the processor. Also, it can be different in different versions of the same language. Read your manual. I think we should tell the companies to standardize functions like <tt>pulsout<\/tt>. It would make servos much more fun.<\/p>\n\n<p>Servos from their Radio Control heritage need a stream of pulses about every 20 milliseconds or so for about ten times of the same pulse to get them to recognize that it is the angle you want them to go to. In your program just set up a loop to send a train of pulses to the servo when you first set it to each new angle. After that you only need to re-fresh you servo about every 30-50 milliseconds or as needed by your servo.<\/p>\n\n<p>I make a constant of my time value like 28x2_TIME = 5. I state the maker, processor, speed and language version in a comment just so I know what I am using. This can be a nasty bug in a program to find.<\/p>\n\n<p>For reading sensors like the Sharp rangefinders you should not use a servo command that constantly updates the servo position every 20 microseconds or so. Why? Because the sensor needs time to calculate the distance reading and to update its output. The servo needs to be steady to do this. Once you get good data from the sensor then you can move the servo. Try it. Use the <tt>pulsout<\/tt> command to move the servo to the next scan point. Then give about 20-50 microseconds pause for the sensor to update its output and then read the sensor. You should get good data this way. Digital and analogue rangefinders use the same method for reading distance and only differ in how you read the device.<\/p>\n\n<p>See table below.<\/p>","locale":"en","parts":[],"prereqs":[],"steps":[{"title":"","lines":[{"text":"A servo using a standarc servo as an exampl.","text_raw":"A servo using a standarc servo as an exampl.","bullet":"black","level":0}],"object":null,"images":[{"imageid":28045,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/bnxAOOtTpEs3Saqe"},{"imageid":27966,"orderby":2,"text":"http:\/\/guide-images.makeprojects.org\/igi\/2g4hNP5ZCXLmsWab"},{"imageid":28105,"orderby":3,"text":"http:\/\/guide-images.makeprojects.org\/igi\/lJMv6TAGgMslGuqe"}],"number":1}],"subject":"","summary":"Servos bring life to our ideas. Servos can be mysterious, but in fact they are very simple.","time_required":"read and create","title":"Servos Unscrambled","tools":[],"type":"technique"},"guideid":"1372"}