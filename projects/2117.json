{"device":"Programming","url":"http:\/\/makeprojects.com\/Project\/X10+Macro+Module\/2117\/1","guide":{"author":{"text":"Jim Newell","userid":1681},"categories":["Programming"],"conclusion":"<p>Maximize Your Macros<\/p>\n\n<p>Extending your use of macros is easy.  First, realize that if you copy the Appendix A example into the Arduino IDE and use it as a template, you need only change that portion of code following the conditional phrase<\/p>\n\n<p><tt>if (SX10.received(<wbr \/>)){.<\/tt><\/p>\n\n<p>Parse the received X10 data using the library functions SX10.houseCode(<wbr \/>), SX10.unitCode() and SX10.cmdCode().  In the example of Figure 24, we search for X10 trigger \u201cA1 ON\u201d like this:<\/p>\n\n<p><tt>if (SX10.houseCode<wbr \/>() =='A')<\/tt><\/p>\n\n<p><tt>if (SX10.unitCode(<wbr \/>) == 1)<\/tt><\/p>\n\n<p><tt>if (SX10.cmndCode(<wbr \/>) == ON)<\/tt><\/p>\n\n<p>If the parsing functions return a desired macro trigger address, we take further actions in the form of commands or delays.  To send X10 commands, use the function SX10.write().  The write function must be invoked twice for every command, with the first call defining the X10 house and unit code, and the 2nd defining the X10 action.  So to send an \u201cON\u201d command to a module with address B1, we use the following:<\/p>\n\n<p><tt>SX10.write(HOUS<wbr \/>E_B, UNIT_1, RPT_SEND);<\/tt><\/p>\n\n<p><tt>SX10.write(HOUS<wbr \/>E_B, ON, RPT_SEND);<\/tt><\/p>\n\n<p>Note that calls to this function must end with a semicolon.<\/p>\n\n<p>Finally, invoke wait periods using the function delay(time), where time is an integer number of milliseconds.  To program a 5 minute wait (which is 30000 milliseconds) we use the following:<\/p>\n\n<p><tt>delay(30000);<\/tt><\/p>\n\n<p>Again, don\u2019t forget the semicolon.<\/p>\n\n<p>That\u2019s about it.  With a little creativity, you can do some amazing things around the house.  Place a motion detector in your mailbox, and have it turn on a light and sound a chime whenever the box is opened.  Add a contact sensor and an X10 PowerFlash module to your garage door, to sound a chime if the door is left open for 5 minutes or more.  Put a motion detector in your teenager\u2019s car, so that when they drive up and get out, the porch light comes on and interior lights illuminate a path to their room.  Or to the refrigerator.  The possibilities for automation are limited only by your imagination.<\/p>\n\n<p>The macro example waits for a signal from the outdoor motion detector, and then responds by turning on a lamp, sounding a chime, and activating sprinklers.  After 30 seconds, the sprinklers and the lamp are turned off.<\/p>\n\n<p>Even if you are not a C++ programmer, you can easily understand the logic used in our example, and alter the macro code to suit your needs.  For instance, you can have the macro module sniff the powerline for an indoor motion detector signal, and then turn on a series of lights that illuminate a path to the bathroom.  This example is included in the macro code listing of Appendix A, to show how multiple macros can coexist in the same Arduino file.<\/p>","difficulty":"Moderate","documents":[],"flags":[{"title":"From MAKE Magazine","flagid":"FROM_MAKE","text":"This project first appeared on the pages of MAKE magazine."},{"title":"Featured Guide","flagid":"GUIDE_STARRED","text":"This project has been found to be exceptionally cool by the MAKE staff."}],"guideid":2117,"image":{"imageid":42155,"text":"http:\/\/guide-images.makeprojects.org\/igi\/v4SJkeqqrUb5jVhL"},"introduction":"<p>As a home automation buff, I\u2019ve used X10 powerline control products for over 30 years.  And although the technology has some shortcomings, I still believe X10 is the cheapest and fastest way to automate a home.<\/p>\n\n<p>One of the most powerful additions to an X10 system is macro capability, where a computer continuously monitors the powerline for trigger signals, and responds by executing a timed sequence of additional X10 commands.  This capability can be implemented with canned automation software as offered by X10.com and others, but often only with serious limitations.  These macros are usually developed with a graphical user interface that limits construction, nesting and conditional logic, and the capability often only works if a resident pc is on and running the software.  X10\u2019s Activehome code will download to a CM11a or CM15a interface for stand-alone macro operation, but I\u2019ve found these interfaces to be unreliable and prone to frequent lock-ups.<\/p>\n\n<p>This project uses the X10 powerline carrier home automation protocol, developed in the late 1970\u2019s by Pico Electronics for British Sound Recording (BSR), and subsequently marketed through a Pico\/BSR partnership known as X10 Ltd.  With this technology, automation commands are transmitted and received using existing house wiring, so that appliances can be turned on and off and lamps can be dimmed or brightened remotely, with no need for dedicated control wires.  X10 commands are injected onto the powerline in a binary format, where a binary 1 is represented by a 1ms burst of a 120KHz signal, and a binary 0 is the lack thereof.<\/p>\n\n<p>Now because home power wiring is noisy, the signals are injected only at certain opportune times, to maximize signal integrity.  Our homes are powered with alternating current, where the voltage polarity changes regularly from positive to negative with a sinusoidal frequency (in the USA) of 60 cycles per second, or 60 Hertz (Hz).  Because of this sinusoidal polarity change, the voltage on our wiring actually crosses through zero volts 120 times each second.  It is at these zero crossing moments that X10 bits are transmitted, as shown in Figure 2.  To accommodate the 3-phase power in a typical house wiring system, each bit is actually transmitted 3 times, once for each phase.<\/p>","introduction_rendered":"<p>As a home automation buff, I\u2019ve used X10 powerline control products for over 30 years.  And although the technology has some shortcomings, I still believe X10 is the cheapest and fastest way to automate a home.<\/p>\n\n<p>One of the most powerful additions to an X10 system is macro capability, where a computer continuously monitors the powerline for trigger signals, and responds by executing a timed sequence of additional X10 commands.  This capability can be implemented with canned automation software as offered by X10.com and others, but often only with serious limitations.  These macros are usually developed with a graphical user interface that limits construction, nesting and conditional logic, and the capability often only works if a resident pc is on and running the software.  X10\u2019s Activehome code will download to a CM11a or CM15a interface for stand-alone macro operation, but I\u2019ve found these interfaces to be unreliable and prone to frequent lock-ups.<\/p>\n\n<p>This project uses the X10 powerline carrier home automation protocol, developed in the late 1970\u2019s by Pico Electronics for British Sound Recording (BSR), and subsequently marketed through a Pico\/BSR partnership known as X10 Ltd.  With this technology, automation commands are transmitted and received using existing house wiring, so that appliances can be turned on and off and lamps can be dimmed or brightened remotely, with no need for dedicated control wires.  X10 commands are injected onto the powerline in a binary format, where a binary 1 is represented by a 1ms burst of a 120KHz signal, and a binary 0 is the lack thereof.<\/p>\n\n<p>Now because home power wiring is noisy, the signals are injected only at certain opportune times, to maximize signal integrity.  Our homes are powered with alternating current, where the voltage polarity changes regularly from positive to negative with a sinusoidal frequency (in the USA) of 60 cycles per second, or 60 Hertz (Hz).  Because of this sinusoidal polarity change, the voltage on our wiring actually crosses through zero volts 120 times each second.  It is at these zero crossing moments that X10 bits are transmitted, as shown in Figure 2.  To accommodate the 3-phase power in a typical house wiring system, each bit is actually transmitted 3 times, once for each phase.<\/p><div class=\"parts\"><strong>Relevant parts<\/strong><ul><li><a href=\"http:\/\/makeprojects.com\/Item\/Arduino_Diecimila_or_Duemilanove\">Arduino Diecimila or Duemilanove<\/a><\/li><li><a href=\"http:\/\/makeprojects.com\/Item\/RJ-11_phone_jack_adhesive_surface_mount\">RJ-11 phone jack, adhesive surface mount<\/a><\/li><li><a href=\"http:\/\/makeprojects.com\/Item\/20-gauge_wire_in_3%22_pieces\">20-gauge wire in 3&amp;quot; pieces<\/a><\/li><li><a href=\"http:\/\/makeprojects.com\/Item\/9V_power_supply\">9V power supply<\/a><\/li><li><a href=\"http:\/\/makeprojects.com\/Item\/X10_Pro_PSC05_2-way_transceiver\">X10 Pro PSC05 2-way transceiver<\/a><\/li><li><a href=\"http:\/\/makeprojects.com\/Item\/RJ-11_phone_cord_3_ft._length\">RJ-11 phone cord, 3 ft. length<\/a><\/li><li><a href=\"http:\/\/makeprojects.com\/Item\/3%E2%80%9D_x_3%E2%80%9D_x_3%E2%80%9D_decorative_box\">3\u201d x 3\u201d x 3\u201d decorative box<\/a><\/li><li><a href=\"http:\/\/makeprojects.com\/Item\/Rubber_grommets_3_8%E2%80%9D_dia.\">Rubber grommets, 3\/8\u201d dia.<\/a><\/li><li><a href=\"http:\/\/makeprojects.com\/Item\/Rubber_standoffs\">Rubber standoffs<\/a><\/li><\/ul><\/div><div class=\"tools\"><strong>Tools<\/strong><ul><li><a href=\"http:\/\/makeprojects.com\/Item\/3_8%22_drill_bit\">3\/8&amp;quot; drill bit<\/a><\/li><li><a href=\"http:\/\/makeprojects.com\/Item\/Drill\">Drill<\/a><\/li><li><a href=\"http:\/\/makeprojects.com\/Item\/Screwdriver_small_Phillips\">Screwdriver, small, Phillips<\/a><\/li><li><a href=\"http:\/\/makeprojects.com\/Item\/USB_A_to_B_cable\">USB A to B cable<\/a><\/li><li><a href=\"http:\/\/www.radioshack.com\/product\/index.jsp?productId=3932543\">Wire cutter\/stripper<\/a><\/li><li><a href=\"http:\/\/makeprojects.com\/Item\/Wire_stripper_crimper\">Wire stripper\/crimper<\/a><\/li><\/ul><\/div>","locale":"en","parts":[{"text":"Arduino Diecimila or Duemilanove","notes":"","url":"http:\/\/makeprojects.com\/Item\/Arduino_Diecimila_or_Duemilanove","thumbnail":""},{"text":"RJ-11 phone jack, adhesive surface mount","notes":"","url":"http:\/\/makeprojects.com\/Item\/RJ-11_phone_jack_adhesive_surface_mount","thumbnail":""},{"text":"20-gauge wire in 3&quot; pieces","notes":"","url":"http:\/\/makeprojects.com\/Item\/20-gauge_wire_in_3%22_pieces","thumbnail":""},{"text":"9V power supply","notes":"","url":"http:\/\/makeprojects.com\/Item\/9V_power_supply","thumbnail":""},{"text":"X10 Pro PSC05 2-way transceiver","notes":"or equivalent X10 TW523","url":"http:\/\/makeprojects.com\/Item\/X10_Pro_PSC05_2-way_transceiver","thumbnail":""},{"text":"RJ-11 phone cord, 3 ft. length","notes":"","url":"http:\/\/makeprojects.com\/Item\/RJ-11_phone_cord_3_ft._length","thumbnail":""},{"text":"3\u201d x 3\u201d x 3\u201d decorative box","notes":"with removable top","url":"http:\/\/makeprojects.com\/Item\/3%E2%80%9D_x_3%E2%80%9D_x_3%E2%80%9D_decorative_box","thumbnail":""},{"text":"Rubber grommets, 3\/8\u201d dia.","notes":"","url":"http:\/\/makeprojects.com\/Item\/Rubber_grommets_3_8%E2%80%9D_dia.","thumbnail":""},{"text":"Rubber standoffs","notes":"","url":"http:\/\/makeprojects.com\/Item\/Rubber_standoffs","thumbnail":""}],"prereqs":[],"steps":[{"title":"Wire the Arduino to the phone jack.","lines":[{"text":"Begin creating the wiring arrangement by connecting the Arduino board to the phone jack receptacle.","text_raw":"Begin creating the wiring arrangement by connecting the Arduino board to the phone jack receptacle.","bullet":"black","level":0},{"text":"Remove the cover from the receptacle, and you\u2019ll see four (4) color coded screw terminals.  Attach a 3\u201d length of 20-gauge wire to each of these.","text_raw":"Remove the cover from the receptacle, and you\u2019ll see four (4) color coded screw terminals.  Attach a 3\u201d length of 20-gauge wire to each of these.","bullet":"black","level":0},{"text":"Then attach the wire from the Yellow screw terminal to Arduino digital pin 2, inserting the free end of the wire into the digital pin header on top of the board.  Connect the wire from the Red screw terminal to Arduino digital pin 4, from the Black terminal to Arduino digital pin 5, and from the Green screw terminal to the Arduino GND pin.","text_raw":"Then attach the wire from the Yellow screw terminal to Arduino digital pin 2, inserting the free end of the wire into the digital pin header on top of the board.  Connect the wire from the Red screw terminal to Arduino digital pin 4, from the Black terminal to Arduino digital pin 5, and from the Green screw terminal to the Arduino GND pin.","bullet":"black","level":0}],"object":null,"images":[{"imageid":42152,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/4a3XdeVPjmKADMaY"},{"imageid":42159,"orderby":2,"text":"http:\/\/guide-images.makeprojects.org\/igi\/lNe4X6oVL2ZhNFOW"},{"imageid":42317,"orderby":3,"text":"http:\/\/guide-images.makeprojects.org\/igi\/OVKlq6wrQwJu4Y1D"}],"number":1},{"title":"Adhere the phone jack receptacle to the Arduino board.","lines":[{"text":"Carefully adhere the phone jack receptacle to the back of the Arduino using a double sided, foam adhesive patch.  These patches are usually supplied with the surface mount phone jack receptacle illustrated here, but if not, just use a square of double-adhesive foam tape.","text_raw":"Carefully adhere the phone jack receptacle to the back of the Arduino using a double sided, foam adhesive patch.  These patches are usually supplied with the surface mount phone jack receptacle illustrated here, but if not, just use a square of double-adhesive foam tape.","bullet":"black","level":0},{"text":"Snap the cover back on the phone receptacle, ensuring the wires are routed nicely out of the receptacle opening to the Arduino\u2019s digital pin header.","text_raw":"Snap the cover back on the phone receptacle, ensuring the wires are routed nicely out of the receptacle opening to the Arduino\u2019s digital pin header.","bullet":"black","level":0}],"object":null,"images":[{"imageid":42160,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/CVfRlDpcuYk1rnWH"}],"number":2},{"title":"Modify the project box.","lines":[{"text":"Place the Arduino\/phone receptacle assembly in the box.  On the box exterior, mark the locations where the phone and power cables must attach, and remove the Arduino assembly.  Now drill two 3\/8\u201d holes in the box at the marked locations.","text_raw":"Place the Arduino\/phone receptacle assembly in the box.  On the box exterior, mark the locations where the phone and power cables must attach, and remove the Arduino assembly.  Now drill two 3\/8\u201d holes in the box at the marked locations.","bullet":"black","level":0},{"text":"Pass one end of a 4-conductor phone cable, along with the 9V power cable, into the box from the outside, through the bare holes we just drilled.  Then slip grommets over the cable end connectors, and push the grommets into the box holes.","text_raw":"Pass one end of a 4-conductor phone cable, along with the 9V power cable, into the box from the outside, through the bare holes we just drilled.  Then slip grommets over the cable end connectors, and push the grommets into the box holes.","bullet":"black","level":0},{"text":"Add rubber bumpers to the bottom of the project box.","text_raw":"Add rubber bumpers to the bottom of the project box.","bullet":"black","level":0}],"object":null,"images":[{"imageid":42162,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/clOxbwCEO6WfCXdY"}],"number":3},{"title":"Connect the Arduino in the box.","lines":[{"text":"Place the Arduino assembly back in the box, and attach the 9V power supply to it.  Plug one end of the phone cable into the phone jack, and the other end into the RJ-11 connector on the PSC05 transceiver.","text_raw":"Place the Arduino assembly back in the box, and attach the 9V power supply to it.  Plug one end of the phone cable into the phone jack, and the other end into the RJ-11 connector on the PSC05 transceiver.","bullet":"black","level":0}],"object":null,"images":[{"imageid":42161,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/5OwRuwyxJLkn2PDP"}],"number":4},{"title":"Install the Arduino IDE.","lines":[{"text":"Download the open source code from <a href=\"http:\/\/arduino.cc\/en\/Main\/Software\" rel=\"nofollow\">http:\/\/arduino.cc\/en\/Main\/Software<\/a>.  The software is available for most computer operating systems including Windows, Mac and Linux.  To setup for your platform, follow the straightforward instructions on the website.","text_raw":"Download the open source code from http:\/\/arduino.cc\/en\/Main\/Software.  The software is available for most computer operating systems including Windows, Mac and Linux.  To setup for your platform, follow the straightforward instructions on the website.","bullet":"black","level":0},{"text":"For the Diecimila or Duemilanove boards used in this project, you\u2019ll need to install a USB serial driver for the onboard FTDI chip; a version is included in the Arduino download package, but if needed you can get the latest driver from: <a href=\"http:\/\/www.ftdichip.com\/Drivers\/VCP.htm\" rel=\"nofollow\">http:\/\/www.ftdichip.com\/Drivers\/VCP.htm<\/a>.","text_raw":"For the Diecimila or Duemilanove boards used in this project, you\u2019ll need to install a USB serial driver for the onboard FTDI chip; a version is included in the Arduino download package, but if needed you can get the latest driver from: http:\/\/www.ftdichip.com\/Drivers\/VCP.htm.","bullet":"black","level":0},{"text":"Once the IDE is running, click on the Tools pull down menu to select the proper version of Arduino board (there are many).","text_raw":"Once the IDE is running, click on the Tools pull down menu to select the proper version of Arduino board (there are many).","bullet":"black","level":0}],"object":null,"images":[{"imageid":42313,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/qyXlFONEVAKnNyPr"}],"number":5},{"title":"Install the X10 library.","lines":[{"text":"Download the integrated X10 library from <a href=\"http:\/\/creatrope.com\/make\/arduino-x10\/\" rel=\"nofollow\">http:\/\/creatrope.com\/make\/arduino-x10\/<\/a>. The x10.zip file contains both X10 \u201csend\u201d and \u201creceive\u201d code elements.","text_raw":"Download the integrated X10 library from http:\/\/creatrope.com\/make\/arduino-x10\/. The x10.zip file contains both X10 \u201csend\u201d and \u201creceive\u201d code elements.","bullet":"black","level":0},{"text":"Copy the X10 folder into the Arduino libraries folder on your computer, located at Arduino.app\/Contents\/Resources<wbr \/>\/Java\/libraries, by right clicking on the Arduino.app icon (or, on a Mac, holding the \u201cControl\u201d key while you click on the .app file).","text_raw":"Copy the X10 folder into the Arduino libraries folder on your computer, located at Arduino.app\/Contents\/Resources\/Java\/libraries, by right clicking on the Arduino.app icon (or, on a Mac, holding the \u201cControl\u201d key while you click on the .app file).","bullet":"black","level":0},{"text":"Re-start the IDE.","text_raw":"Re-start the IDE.","bullet":"black","level":0}],"object":null,"images":[{"imageid":42316,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/dChjiLOeXcsj5fUn"}],"number":6},{"title":"Run a code checkout.","lines":[{"text":"To check the Arduino\u2019s X10 send and receive functions, load the <em>X10_receive<\/em> example.","text_raw":"To check the Arduino\u2019s X10 send and receive functions, load the ''X10_receive'' example.","bullet":"black","level":0},{"text":"Remove the macro module from its box, disconnecting the power and phone cables.","text_raw":"Remove the macro module from its box, disconnecting the power and phone cables.","bullet":"black","level":0},{"text":"Connect a USB cable between your pc and the Arduino board.  If you use a Diecimila, ensure that the plastic jumper near the square USB port is positioned on the 2 pins closest to the port, so that the pc will power the Arduino.","text_raw":"Connect a USB cable between your pc and the Arduino board.  If you use a Diecimila, ensure that the plastic jumper near the square USB port is positioned on the 2 pins closest to the port, so that the pc will power the Arduino.","bullet":"black","level":0},{"text":"Connect a phone cable between the macro module\u2019s RJ-11 jack and the PSC05, and plug the latter into a wall outlet.","text_raw":"Connect a phone cable between the macro module\u2019s RJ-11 jack and the PSC05, and plug the latter into a wall outlet.","bullet":"black","level":0},{"text":"Upload the <em>X10_receive<\/em> example code to the Arduino.","text_raw":"Upload the ''X10_receive'' example code to the Arduino.","bullet":"black","level":0},{"text":"If you\u2019ve done everything properly, X10 commands will appear in the Serial Monitor window.","text_raw":"If you\u2019ve done everything properly, X10 commands will appear in the Serial Monitor window.","bullet":"black","level":0}],"object":null,"images":[{"imageid":42319,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/wVZKiTjKtLv4LA2v"},{"imageid":42322,"orderby":2,"text":"http:\/\/guide-images.makeprojects.org\/igi\/lnCboKXmPLWSQUSX"},{"imageid":42323,"orderby":3,"text":"http:\/\/guide-images.makeprojects.org\/igi\/H2I4tUlTyr5eIdI3"}],"number":7},{"title":"Program the macro module.","lines":[{"text":"Replace the \u201cloop\u201d function in the checkout example above with new code, that listens for macro triggers on the powerline and responds by sending a sequence of X10 control commands.","text_raw":"Replace the \u201cloop\u201d function in the checkout example above with new code, that listens for macro triggers on the powerline and responds by sending a sequence of X10 control commands.","bullet":"black","level":0},{"text":"To illustrate a powerful macro sequence, I setup the following hardware:","text_raw":"To illustrate a powerful macro sequence, I setup the following hardware:","bullet":"black","level":0},{"text":"Outdoor motion detector set to A1","text_raw":"Outdoor motion detector set to A1","bullet":"black","level":1},{"text":"Lamp module set to B1","text_raw":"Lamp module set to B1","bullet":"black","level":1},{"text":"Porch light switch module set to C1","text_raw":"Porch light switch module set to C1","bullet":"black","level":1},{"text":"PowerHorn chime module set to D1","text_raw":"PowerHorn chime module set to D1","bullet":"black","level":1},{"text":"IrrMaster sprinkler controller set to House Code E","text_raw":"IrrMaster sprinkler controller set to House Code E","bullet":"black","level":1}],"object":null,"images":[{"imageid":42154,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/hnarDDrDbWu4F4Mm"}],"number":8}],"subject":"","summary":"One of the most powerful additions to an X10 system is macro capability, where a computer continuously monitors the powerline for trigger signals, and responds by executing a timed sequence of additional X10 commands.","time_required":"1 day","title":"X10 Macro Module","tools":[{"text":"3\/8&quot; drill bit","notes":"","url":"http:\/\/makeprojects.com\/Item\/3_8%22_drill_bit","thumbnail":""},{"text":"Drill","notes":"","url":"http:\/\/makeprojects.com\/Item\/Drill","thumbnail":""},{"text":"Screwdriver, small, Phillips","notes":"","url":"http:\/\/makeprojects.com\/Item\/Screwdriver_small_Phillips","thumbnail":""},{"text":"USB A to B cable","notes":"","url":"http:\/\/makeprojects.com\/Item\/USB_A_to_B_cable","thumbnail":""},{"text":"Wire cutter\/stripper","notes":"","url":"http:\/\/www.radioshack.com\/product\/index.jsp?productId=3932543","thumbnail":""},{"text":"Wire stripper\/crimper","notes":"","url":"http:\/\/makeprojects.com\/Item\/Wire_stripper_crimper","thumbnail":""}],"type":"project"},"guideid":"2117"}