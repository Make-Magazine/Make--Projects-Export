{"device":"Programming","url":"http:\/\/makeprojects.com\/Project\/Beginning+Programming%3A+Learning+Python\/942\/1","guide":{"author":{"text":"Chandler","userid":3920},"categories":["Programming"],"conclusion":"","difficulty":"Moderate","documents":[],"flags":[{"title":"User-Contributed Project","flagid":"GUIDE_USER_CONTRIBUTED","text":"This project guide is not managed by MAKE staff."}],"guideid":942,"image":{"imageid":16865,"text":"http:\/\/guide-images.makeprojects.org\/igi\/tnvGfkM5i1Lsq2RE"},"introduction":"<p>Programming is one of the key components in the technology in our lives today. From things like video games to even the computer on which you are reading this, programs are needed to make them operate. And if you want to learn how to program, this tutorial is where to start.<\/p>\n\n<p>In this tutorial, you will learn about the programming language <em>Python<\/em> (yes, that is the name of a snake, but in this case the language was named after the television show <em>Monty Python<\/em>). Python is a great language to start with because of the ease with which you can write programs. Python doesn't require a huge structure of classes and methods to get your program running. However, for those of you who are advanced in programming, Python is optionally object-oriented. This makes it quick and simple to write programs when simplicity is needed, while using the same language you can create advanced programs with multiple classes and methods.<\/p>","introduction_rendered":"<p>Programming is one of the key components in the technology in our lives today. From things like video games to even the computer on which you are reading this, programs are needed to make them operate. And if you want to learn how to program, this tutorial is where to start.<\/p>\n\n<p>In this tutorial, you will learn about the programming language <em>Python<\/em> (yes, that is the name of a snake, but in this case the language was named after the television show <em>Monty Python<\/em>). Python is a great language to start with because of the ease with which you can write programs. Python doesn't require a huge structure of classes and methods to get your program running. However, for those of you who are advanced in programming, Python is optionally object-oriented. This makes it quick and simple to write programs when simplicity is needed, while using the same language you can create advanced programs with multiple classes and methods.<\/p>","locale":"en","parts":[],"prereqs":[],"steps":[{"title":"","lines":[{"text":"<strong>Setup:<\/strong>","text_raw":"'''Setup:'''","bullet":"black","level":0},{"text":"Welcome to programming! If you have seen my tutorial on OOP (Object-Oriented Programming), let me tell you that this tutorial will be much easier to follow.","text_raw":"Welcome to programming! If you have seen my tutorial on OOP (Object-Oriented Programming), let me tell you that this tutorial will be much easier to follow.","bullet":"black","level":0},{"text":"To start, go to the official <a href=\"http:\/\/www.python.org\" rel=\"nofollow\">Python programming language website<\/a> and click on the Download link. Click on your operating system in the list (Windows, Macintosh, or other) and follow the instructions on the page. When done, open the <em>Python Interactive Prompt<\/em>. To do that, search for &quot;IDLE&quot; and open it. IDLE is an IDE (Integrated Development Environment); in this case it stands for Integrated DeveLopment Environment, spelled IDLE after Eric Idle, one of the actors on <em>Monty Python<\/em>. Once you're at the Python interactive prompt, the fun can begin.","text_raw":"To start, go to the official [http:\/\/www.python.org|Python programming language website] and click on the Download link. Click on your operating system in the list (Windows, Macintosh, or other) and follow the instructions on the page. When done, open the ''Python Interactive Prompt''. To do that, search for \"IDLE\" and open it. IDLE is an IDE (Integrated Development Environment); in this case it stands for Integrated DeveLopment Environment, spelled IDLE after Eric Idle, one of the actors on ''Monty Python''. Once you're at the Python interactive prompt, the fun can begin.","bullet":"black","level":0},{"text":"If you can't find IDLE, search for &quot;Python&quot; and see if you can find something along the lines of &quot;Python (Command Line)&quot;.","text_raw":"If you can't find IDLE, search for \"Python\" and see if you can find something along the lines of \"Python (Command Line)\".","bullet":"black","level":0}],"object":null,"images":[{"imageid":16863,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/e1VQJgbVZKnhyDsP"}],"number":1},{"title":"","lines":[{"text":"<strong>Learning Simple Commands:<\/strong>","text_raw":"'''Learning Simple Commands:'''","bullet":"black","level":0},{"text":"Once in IDLE or Command Line Python, type:","text_raw":"Once in IDLE or Command Line Python, type:","bullet":"black","level":0},{"text":"<tt>print &quot;Hi!&quot;<\/tt>","text_raw":"``print \"Hi!\"``","bullet":"black","level":0},{"text":"next to the little &gt;&gt;&gt; and hit Enter. It prints (writes to the screen) &quot;Hi!&quot; and another &gt;&gt;&gt; appears! That was pretty simple, right?","text_raw":"next to the little >>> and hit Enter. It prints (writes to the screen) \"Hi!\" and another >>> appears! That was pretty simple, right?","bullet":"black","level":0},{"text":"Now you know the print command. Just type <tt>print<\/tt> and write what you want it to print after it in quotation marks! (The quotation marks are very important - without them, Python mistakes <tt>Hi!<\/tt> for a variable.)","text_raw":"Now you know the print command. Just type ``print`` and write what you want it to print after it in quotation marks! (The quotation marks are very important - without them, Python mistakes ``Hi!`` for a variable.)","bullet":"black","level":0}],"object":null,"images":[{"imageid":16868,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/JOWfRRIUQrLDtvwn"}],"number":2},{"title":"","lines":[{"text":"Note: since Python version 3, print can be used without parentheses around what you want to print. If you are using a later version, or are experiencing problems trying to use this newer version, just use <tt>print(&quot;Text goes here&quot;)<\/tt>.","text_raw":"Note: since Python version 3, print can be used without parentheses around what you want to print. If you are using a later version, or are experiencing problems trying to use this newer version, just use ``print(\"Text goes here\")``.","bullet":"black","level":0}],"object":null,"images":[],"number":3},{"title":"","lines":[{"text":"Let's try something new! Variables are just like they were in algebra: they give names to numbers whose values may or may not be known. Python's variables are very similar. I'll show an example.","text_raw":"Let's try something new! Variables are just like they were in algebra: they give names to numbers whose values may or may not be known. Python's variables are very similar. I'll show an example.","bullet":"black","level":0},{"text":"<tt>x = 5<\/tt>","text_raw":"``x = 5``","bullet":"black","level":0},{"text":"<tt>print x<\/tt>","text_raw":"``print x``","bullet":"black","level":0},{"text":"Did you see what it did? It stored the number 5 into the variable x. Then, whenever you say x in a program, the computer thinks &quot;5!&quot; So <tt>print x<\/tt> is equivalent to <tt>print 5<\/tt>. Make sense so far?","text_raw":"Did you see what it did? It stored the number 5 into the variable x. Then, whenever you say x in a program, the computer thinks \"5!\" So ``print x`` is equivalent to ``print 5``. Make sense so far?","bullet":"black","level":0}],"object":null,"images":[{"imageid":16870,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/CKNt6cbQAfKdC1mm"}],"number":4},{"title":"","lines":[{"text":"Python can do math, too. Type in:","text_raw":"Python can do math, too. Type in:","bullet":"black","level":0},{"text":"<tt>y = 5<\/tt>","text_raw":"``y = 5``","bullet":"black","level":0},{"text":"<tt>z = 6<\/tt>","text_raw":"``z = 6``","bullet":"black","level":0},{"text":"<tt>print y + z<\/tt>","text_raw":"``print y + z``","bullet":"black","level":0},{"text":"Did you guess what would happen before you typed this in? After you typed all of that in, you probably saw &quot;11&quot; if you typed it correctly. It's just like the last example, but it replaces two variables. When it sees y, it replaces it with 5. Same for z and 6. So when it comes across <tt>print y + z<\/tt>, it sees <tt>print 5 + 6<\/tt>!","text_raw":"Did you guess what would happen before you typed this in? After you typed all of that in, you probably saw \"11\" if you typed it correctly. It's just like the last example, but it replaces two variables. When it sees y, it replaces it with 5. Same for z and 6. So when it comes across ``print y + z``, it sees ``print 5 + 6``!","bullet":"black","level":0},{"text":"Note: you can also do subtraction (-), multiplication, (*), division (\/), and much more.","text_raw":"Note: you can also do subtraction (-), multiplication, (*), division (\/), and much more.","bullet":"black","level":0}],"object":null,"images":[{"imageid":16878,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/pvKNpHEQh12ai43s"}],"number":5},{"title":"","lines":[{"text":"Say you want to add 4 to y. You could type this:","text_raw":"Say you want to add 4 to y. You could type this:","bullet":"black","level":0},{"text":"<tt>y = y + 4<\/tt>","text_raw":"``y = y + 4``","bullet":"black","level":0},{"text":"It does work. It may seem confusing, but all it's doing is setting y (on the left side) to 4 more than it already was. Rather than doing that, Python has a shortcut that makes things much less confusing:","text_raw":"It does work. It may seem confusing, but all it's doing is setting y (on the left side) to 4 more than it already was. Rather than doing that, Python has a shortcut that makes things much less confusing:","bullet":"black","level":0},{"text":"<tt>y += 4<\/tt>","text_raw":"``y += 4``","bullet":"black","level":0},{"text":"After typing the code above, print y by typing the following code:","text_raw":"After typing the code above, print y by typing the following code:","bullet":"black","level":0},{"text":"<tt>print y<\/tt>","text_raw":"``print y``","bullet":"black","level":0},{"text":"It will, as you may have guessed, print out &quot;9&quot;.","text_raw":"It will, as you may have guessed, print out \"9\".","bullet":"black","level":0}],"object":null,"images":[{"imageid":16880,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/PrBDNXEGSg1UILxQ"}],"number":6},{"title":"","lines":[{"text":"Now that you've got that done, let's move on to letting your code make its own decisions. We aren't going to make an AI program (sadly), but we will learn about the <tt>if<\/tt> statement. Have you ever had a thought that began with &quot;What if...&quot;? For instance, &quot;What if I forgot to close the door?&quot; The answer can vary in intensity, but one example could be that a lot of money might be wasted on your heater. The <tt>if<\/tt> statement works in a very similar manner.","text_raw":"Now that you've got that done, let's move on to letting your code make its own decisions. We aren't going to make an AI program (sadly), but we will learn about the ``if`` statement. Have you ever had a thought that began with \"What if...\"? For instance, \"What if I forgot to close the door?\" The answer can vary in intensity, but one example could be that a lot of money might be wasted on your heater. The ``if`` statement works in a very similar manner.","bullet":"black","level":0},{"text":"Here's how it works:","text_raw":"Here's how it works:","bullet":"black","level":0},{"text":"<tt>if <em>statement<\/em>:<\/tt>","text_raw":"``if ''statement'':``","bullet":"black","level":0},{"text":"<tt>[tab] actions<\/tt>","text_raw":"``[tab] actions``","bullet":"black","level":0},{"text":"Here's an example. (Note: IDLE automatically adds the tab, and for IDLE and command-line Python, in this example, you have to press Enter two times after the last statement.)","text_raw":"Here's an example. (Note: IDLE automatically adds the tab, and for IDLE and command-line Python, in this example, you have to press Enter two times after the last statement.)","bullet":"black","level":0},{"text":"<tt>if y == 9:<\/tt>","text_raw":"``if y == 9:``","bullet":"black","level":0},{"text":"<tt>[tab] print &quot;Y is equal to nine!&quot;<\/tt>","text_raw":"``[tab] print \"Y is equal to nine!\"``","bullet":"black","level":0},{"text":"The &quot;==&quot; might be confusing, but &quot;=&quot; was already taken for giving values to variables, so Python had to find a new symbol for <tt>if<\/tt> statements to indicate equality. Think about it this way: &quot;=&quot; is like a statement, and &quot;==&quot; is like a question (Does y = 9?). There are also &quot;&lt;&quot; (less than), &quot;&gt;&quot; (greater than), &quot;!=&quot; (not equal to), &quot;&lt;=&quot; (less than or equal to), and &quot;&gt;=&quot; (greater than or equal to).","text_raw":"The \"==\" might be confusing, but \"=\" was already taken for giving values to variables, so Python had to find a new symbol for ``if`` statements to indicate equality. Think about it this way: \"=\" is like a statement, and \"==\" is like a question (Does y = 9?). There are also \"<\" (less than), \">\" (greater than), \"!=\" (not equal to), \"<=\" (less than or equal to), and \">=\" (greater than or equal to).","bullet":"black","level":0}],"object":null,"images":[{"imageid":16977,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/ydRWwuMONcTuSDMI"}],"number":7},{"title":"","lines":[{"text":"Nice job so far. If you've made it here, you will likely make it through the entire series of tutorials. Before I end this tutorial, I'd like to show one last trick: executing Python files.","text_raw":"Nice job so far. If you've made it here, you will likely make it through the entire series of tutorials. Before I end this tutorial, I'd like to show one last trick: executing Python files.","bullet":"black","level":0},{"text":"Open a new text document, and name it <strong>test.py<\/strong>. You can also go to File -&gt; New Window in IDLE. Inside, type in the following code:","text_raw":"Open a new text document, and name it '''test.py'''. You can also go to File -> New Window in IDLE. Inside, type in the following code:","bullet":"black","level":0},{"text":"<tt>x = 5<\/tt>","text_raw":"``x = 5``","bullet":"black","level":0},{"text":"<tt>y = 5<\/tt>","text_raw":"``y = 5``","bullet":"black","level":0},{"text":"<tt>if x == y:<\/tt>","text_raw":"``if x == y:``","bullet":"black","level":0},{"text":"<tt>[tab] print &quot;X = Y!&quot;<\/tt>","text_raw":"``[tab] print \"X = Y!\"``","bullet":"black","level":0},{"text":"Now, go to Terminal, the Command Prompt, or whatever alternative you have on your system and change your directory to where your file is.","text_raw":"Now, go to Terminal, the Command Prompt, or whatever alternative you have on your system and change your directory to where your file is.","bullet":"black","level":0},{"text":"To do that, type <tt>cd<\/tt> (for all systems) and then the directory that your file is in. For instance (Linux example), type <tt>cd \/home\/username\/Desktop<\/tt>. Once done with that, type <tt>python<\/tt> and then the name of your file (also all systems). Example: <tt>python test.py<\/tt>.","text_raw":"To do that, type ``cd`` (for all systems) and then the directory that your file is in. For instance (Linux example), type ``cd \/home\/username\/Desktop``. Once done with that, type ``python`` and then the name of your file (also all systems). Example: ``python test.py``.","bullet":"black","level":0}],"object":null,"images":[{"imageid":16979,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/HafsykWGpctIqIC1"}],"number":8}],"subject":"","summary":"Learn to program in Python, a language that is easy to learn and capable enough for writing complex programs.","time_required":null,"title":"Beginning Programming: Learning Python","tools":[],"type":"technique"},"guideid":"942"}