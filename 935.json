{"device":"Programming","url":"http:\/\/makeprojects.com\/Project\/Beginning+Object-Oriented+Programming%3A+Make+a+Simple+Game+With+Java\/935\/1","guide":{"author":{"text":"Chandler","userid":3920},"categories":["Programming","Gaming"],"conclusion":"","difficulty":"Moderate","documents":[{"text":"RPSCode.pdf","url":"http:\/\/make-documents.s3.amazonaws.com\/K6u1bUaVFpLbaPQE.pdf","documentid":155}],"flags":[{"title":"User-Contributed Project","flagid":"GUIDE_USER_CONTRIBUTED","text":"This project guide is not managed by MAKE staff."}],"guideid":935,"image":{"imageid":16633,"text":"http:\/\/guide-images.makeprojects.org\/igi\/b1NF4v3dJCoDj5Ki"},"introduction":"<p><strong>Object-oriented programming: a style of computer programming that uses different modules of code that build on each other or work together to create a program.<\/strong> OOP (for short) is commonly used today rather than line after line of code, to make programs more organized as collections of smaller units. This is an essential technique in programming today, and I will teach it to my best ability in this tutorial using the well-known programming language (and my favorite) Java. Note: this tutorial is currently a rough draft, but will be improved soon! Good luck!<\/p>","introduction_rendered":"<p><strong>Object-oriented programming: a style of computer programming that uses different modules of code that build on each other or work together to create a program.<\/strong> OOP (for short) is commonly used today rather than line after line of code, to make programs more organized as collections of smaller units. This is an essential technique in programming today, and I will teach it to my best ability in this tutorial using the well-known programming language (and my favorite) Java. Note: this tutorial is currently a rough draft, but will be improved soon! Good luck!<\/p><div class=\"tools\"><strong>Tools<\/strong><ul><li><a href=\"http:\/\/makeprojects.com\/Item\/Any_computer_w_internet\">Any computer w\/ internet<\/a><\/li><\/ul><\/div>","locale":"en","parts":[],"prereqs":[],"steps":[{"title":"","lines":[{"text":"<strong>Setup:<\/strong>","text_raw":"'''Setup:'''","bullet":"black","level":0},{"text":"Before you begin coding, you need something called the <em>JDK<\/em>. This stands for <em>Java Development Kit,<\/em> and is Java's free way of letting you program in their language. Just click <a href=\"https:\/\/cds.sun.com\/is-bin\/INTERSHOP.enfinity\/WFS\/CDS-CDS_Developer-Site\/en_US\/-\/USD\/ViewProductDetail-Start?ProductRef=jdk-1.5.0_22-oth-JPR@CDS-CDS_Developer\" rel=\"nofollow\">this<\/a> link, and you will be led to the JDK 5.0 download page.","text_raw":"Before you begin coding, you need something called the ''JDK''. This stands for ''Java Development Kit,'' and is Java's free way of letting you program in their language. Just click [https:\/\/cds.sun.com\/is-bin\/INTERSHOP.enfinity\/WFS\/CDS-CDS_Developer-Site\/en_US\/-\/USD\/ViewProductDetail-Start?ProductRef=jdk-1.5.0_22-oth-JPR@CDS-CDS_Developer|this] link, and you will be led to the JDK 5.0 download page.","bullet":"black","level":0},{"text":"After downloading the JDK package, follow the instructions to install it on your computer. Make sure to use the default options for where you install the JDK, because that will come in handy later.","text_raw":"After downloading the JDK package, follow the instructions to install it on your computer. Make sure to use the default options for where you install the JDK, because that will come in handy later.","bullet":"black","level":0}],"object":null,"images":[{"imageid":16633,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/b1NF4v3dJCoDj5Ki"}],"number":1},{"title":"","lines":[{"text":"<strong>Setup, part 2:<\/strong>","text_raw":"'''Setup, part 2:'''","bullet":"black","level":0},{"text":"Next, to make programming in Java easier, download and install NetBeans. NetBeans is an Integrated Development Environment, or IDE for short, that was created just for Java. NetBeans can be downloaded <a href=\"http:\/\/netbeans.org\/downloads\/index.html\" rel=\"nofollow\">here<\/a>. I'd recommend that you install the Java SE package if you're new to Java.","text_raw":"Next, to make programming in Java easier, download and install NetBeans. NetBeans is an Integrated Development Environment, or IDE for short, that was created just for Java. NetBeans can be downloaded [http:\/\/netbeans.org\/downloads\/index.html|here]. I'd recommend that you install the Java SE package if you're new to Java.","bullet":"black","level":0}],"object":null,"images":[{"imageid":16635,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/akGpWs4aVtmQPrpr"}],"number":2},{"title":"","lines":[{"text":"<strong>Setup, part 3:<\/strong>","text_raw":"'''Setup, part 3:'''","bullet":"black","level":0},{"text":"Simply open the NetBeans installer and walk through the process. It will ask you where to install NetBeans and where the JDK was installed. If you used the default option for this in the JDK installer, you should be fine accepting the default option here. Check the checkbox that instructs the installer to open NetBeans when you're done and click &quot;Finish.&quot; The installer will close, NetBeans will open and we can get started!","text_raw":"Simply open the NetBeans installer and walk through the process. It will ask you where to install NetBeans and where the JDK was installed. If you used the default option for this in the JDK installer, you should be fine accepting the default option here. Check the checkbox that instructs the installer to open NetBeans when you're done and click \"Finish.\" The installer will close, NetBeans will open and we can get started!","bullet":"black","level":0}],"object":null,"images":[{"imageid":16636,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/S4DSbRZlkyH6owte"}],"number":3},{"title":"","lines":[{"text":"<strong>Beginning your first project in NetBeans:<\/strong>","text_raw":"'''Beginning your first project in NetBeans:'''","bullet":"black","level":0},{"text":"To start, go to File -&gt; New -&gt; Project. A window will open. Click &quot;Next&quot;, and give your project a name (I will use &quot;OOPExample1&quot;). Once that's done, click &quot;Finish.&quot; A file (&quot;OOPExample1.java&quot;, if you used that name) will appear.","text_raw":"To start, go to File -> New -> Project. A window will open. Click \"Next\", and give your project a name (I will use \"OOPExample1\"). Once that's done, click \"Finish.\" A file (\"OOPExample1.java\", if you used that name) will appear.","bullet":"black","level":0}],"object":null,"images":[{"imageid":16807,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/EfMQWis4HDEYKHUR"}],"number":4},{"title":"","lines":[{"text":"<strong>Goal:<\/strong>","text_raw":"'''Goal:'''","bullet":"black","level":0},{"text":"Now we decide what will happen in our program. For this project, I will teach you how to make the game RPS (rock, paper, scissors): a simplistic yet fun game, great to learn to program. I will try to keep this tutorial simple to follow, and will explain the code as best I can.","text_raw":"Now we decide what will happen in our program. For this project, I will teach you how to make the game RPS (rock, paper, scissors): a simplistic yet fun game, great to learn to program. I will try to keep this tutorial simple to follow, and will explain the code as best I can.","bullet":"black","level":0}],"object":null,"images":[{"imageid":16810,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/JUwFXGp1O3nPFWLw"}],"number":5},{"title":"","lines":[{"text":"<strong>Code:<\/strong>","text_raw":"'''Code:'''","bullet":"black","level":0},{"text":"The following code may not make much sense if you are new to Java, but it will after I explain. The code has been attached to this project and can be accessed as RPSCode.pdf in the &quot;Files&quot; section. Open it, delete everything in your &quot;OOPExample1.java&quot; file, and paste this code inside. Now, hit the &quot;Run&quot; button (it looks like a &quot;Play&quot; button on a DVD player, green), and some text will appear. You can now play Rock, Paper, Scissors with your computer! To play again, hit the &quot;Run&quot; button again.","text_raw":"The following code may not make much sense if you are new to Java, but it will after I explain. The code has been attached to this project and can be accessed as RPSCode.pdf in the \"Files\" section. Open it, delete everything in your \"OOPExample1.java\" file, and paste this code inside. Now, hit the \"Run\" button (it looks like a \"Play\" button on a DVD player, green), and some text will appear. You can now play Rock, Paper, Scissors with your computer! To play again, hit the \"Run\" button again.","bullet":"black","level":0}],"object":null,"images":[{"imageid":16848,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/gZEFnE5yO2bccQCV"}],"number":6},{"title":"","lines":[{"text":"<strong>Explanation of the Code:<\/strong>","text_raw":"'''Explanation of the Code:'''","bullet":"black","level":0},{"text":"We made it through the programming! Next is to understand it. Look back at your code.","text_raw":"We made it through the programming! Next is to understand it. Look back at your code.","bullet":"black","level":0},{"text":"The first line just tells what &quot;package&quot; this piece of code is in. This simply tells where your code is stored. The next line is an <tt>import<\/tt> statement: it lets you use extra commands so that you can do more stuff with your program. <tt>Scanner<\/tt> (what it imports) is a module that reads what you type in when the program asks for your move.","text_raw":"The first line just tells what \"package\" this piece of code is in. This simply tells where your code is stored. The next line is an ``import`` statement: it lets you use extra commands so that you can do more stuff with your program. ``Scanner`` (what it imports) is a module that reads what you type in when the program asks for your move.","bullet":"black","level":0},{"text":"<tt>public class OOPExample1<\/tt> just starts a new class (a collection of functions and variables). Inside there is a method (function): <tt>public static void main(String[] args)<\/tt>. This is the main method, which runs when the program runs.","text_raw":"``public class OOPExample1`` just starts a new class (a collection of functions and variables). Inside there is a method (function): ``public static void main(String[] args)``. This is the main method, which runs when the program runs.","bullet":"black","level":0},{"text":"Inside is a bunch of code, the first of which is the line <tt>CPU cpu1 = new CPU();<\/tt>. This may look confusing, but all it does is create an <em>instance<\/em> (kind of like a personal copy) of the CPU class, which comes later. It also makes an instance of a Scanner: all that does is read what you type. These instances can be called by their <em>names<\/em> (<tt>cpu1<\/tt> and <tt>sc1<\/tt>, respectively).","text_raw":"Inside is a bunch of code, the first of which is the line ``CPU cpu1 = new CPU();``. This may look confusing, but all it does is create an ''instance'' (kind of like a personal copy) of the CPU class, which comes later. It also makes an instance of a Scanner: all that does is read what you type. These instances can be called by their ''names'' (``cpu1`` and ``sc1``, respectively).","bullet":"black","level":0},{"text":"Next, we <tt>define<\/tt> (make) two variables: <tt>validmove<\/tt> (type <tt>boolean<\/tt>, either true or false) and <tt>userMove<\/tt> (a <tt>String<\/tt> (bunch of text) that stores what the user's move is).","text_raw":"Next, we ``define`` (make) two variables: ``validmove`` (type ``boolean``, either true or false) and ``userMove`` (a ``String`` (bunch of text) that stores what the user's move is).","bullet":"black","level":0},{"text":"The code inside the loop prints the message instructing you to type your move, (the <tt>System.out.println<\/tt> command), reads what you type (the <tt>nextLine<\/tt> command), converts it to lowercase (the <tt>toLowerCase<\/tt>) command, and tests it to see if the input is either &quot;rock&quot;, &quot;paper&quot;, or &quot;scissors&quot; (the <tt>if<\/tt> command; <tt>||<\/tt> means &quot;or&quot;). If one of those is true, <tt>validmove<\/tt> is set to true, and the loop ends. Phew! Now we have the user's move!","text_raw":"The code inside the loop prints the message instructing you to type your move, (the ``System.out.println`` command), reads what you type (the ``nextLine`` command), converts it to lowercase (the ``toLowerCase``) command, and tests it to see if the input is either \"rock\", \"paper\", or \"scissors\" (the ``if`` command; ``||`` means \"or\"). If one of those is true, ``validmove`` is set to true, and the loop ends. Phew! Now we have the user's move!","bullet":"black","level":0},{"text":"After the <tt>while<\/tt> loop, there is a  command that defines another string: <tt>CPUMove<\/tt>. It's kind of self-explanatory what this string does: it stores the CPU's move. This line uses a method (function) called <tt>getCPUMove<\/tt> in the CPU Class (once again, a collection of variables and methods) to decide (randomly) what the computer's move should be. Finally, CPU's <tt>comparemoves<\/tt> method is called and it is given the strings <tt>CPUMove<\/tt> and <tt>userMove<\/tt> to let it know what moves have been made by the players.","text_raw":"After the ``while`` loop, there is a  command that defines another string: ``CPUMove``. It's kind of self-explanatory what this string does: it stores the CPU's move. This line uses a method (function) called ``getCPUMove`` in the CPU Class (once again, a collection of variables and methods) to decide (randomly) what the computer's move should be. Finally, CPU's ``comparemoves`` method is called and it is given the strings ``CPUMove`` and ``userMove`` to let it know what moves have been made by the players.","bullet":"black","level":0}],"object":null,"images":[{"imageid":16850,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/USAKihRBYtyOP6Qd"}],"number":7},{"title":"","lines":[{"text":"<strong>Explanation of the Code, part 2:<\/strong>","text_raw":"'''Explanation of the Code, part 2:'''","bullet":"black","level":0},{"text":"(Note: don't rely on this image for the code, because I could not fit it all into one image). Now I will explain the CPU class! By the way, if you have any questions about what any of this terminology is, there is a great tutorial <a href=\"http:\/\/download.oracle.com\/javase\/tutorial\/java\/concepts\/\" rel=\"nofollow\">here<\/a> about understanding OOP, created by the makers of Java.","text_raw":"(Note: don't rely on this image for the code, because I could not fit it all into one image). Now I will explain the CPU class! By the way, if you have any questions about what any of this terminology is, there is a great tutorial [http:\/\/download.oracle.com\/javase\/tutorial\/java\/concepts\/|here] about understanding OOP, created by the makers of Java.","bullet":"black","level":0},{"text":"The first method is called <tt>comparemoves<\/tt>. Guess what it does? (Compares moves!). Inside are a bunch of <tt>if<\/tt> statements. Some of these are inside of each other, which might seem a little weird. Basically, all it does is see if the user played rock, paper, or scissors. Once it finds out which one he\/she played, a bunch of <tt>if<\/tt> statements inside that find out what the CPU played and tell a different method, <tt>outputmoves<\/tt>, what to print on the screen.","text_raw":"The first method is called ``comparemoves``. Guess what it does? (Compares moves!). Inside are a bunch of ``if`` statements. Some of these are inside of each other, which might seem a little weird. Basically, all it does is see if the user played rock, paper, or scissors. Once it finds out which one he\/she played, a bunch of ``if`` statements inside that find out what the CPU played and tell a different method, ``outputmoves``, what to print on the screen.","bullet":"black","level":0},{"text":"Note that this method is called <tt>public void comparemoves<\/tt>. <em>Void<\/em> means that when it's called, it doesn't <em>return<\/em> anything. Returning a value means that the function passes back a value to the instruction that called it. The line <tt>String CPUMove = cpu1.getCPUMove();<\/tt> takes what was returned from the method <tt>getCPUMove<\/tt> in <tt>cpu1<\/tt> and puts it in the string <tt>CPUMove<\/tt>. Make sense?","text_raw":"Note that this method is called ``public void comparemoves``. ''Void'' means that when it's called, it doesn't ''return'' anything. Returning a value means that the function passes back a value to the instruction that called it. The line ``String CPUMove = cpu1.getCPUMove();`` takes what was returned from the method ``getCPUMove`` in ``cpu1`` and puts it in the string ``CPUMove``. Make sense?","bullet":"black","level":0},{"text":"Now let's talk about the <tt>outputmoves<\/tt> method, which the <tt>comparemoves<\/tt> method calls. All it does is put together a string, <tt>output<\/tt>, and print it to the <em>console<\/em>, where you typed your moves earlier. The <tt>System.out.println<\/tt> statement is pretty simple, as all it does is print the string <tt>output<\/tt>. The <tt>String output = ...<\/tt> statement might be a bit confusing, however. It seems pretty normal, but what's this <tt>concat()<\/tt> thing? It's a method that <em>concatentates<\/em> (fancy word for &quot;pins onto the end&quot;) the thing in parentheses to the string before it.","text_raw":"Now let's talk about the ``outputmoves`` method, which the ``comparemoves`` method calls. All it does is put together a string, ``output``, and print it to the ''console'', where you typed your moves earlier. The ``System.out.println`` statement is pretty simple, as all it does is print the string ``output``. The ``String output = ...`` statement might be a bit confusing, however. It seems pretty normal, but what's this ``concat()`` thing? It's a method that ''concatentates'' (fancy word for \"pins onto the end\") the thing in parentheses to the string before it.","bullet":"black","level":0},{"text":"This helps us put together the sentence &quot;I played &lt;move that the computer played&gt;. &lt;sentence that says who won&gt;!&quot; using the <em>parameters that were passed to it<\/em> (things that were given to it to work with).","text_raw":"This helps us put together the sentence \"I played <move that the computer played>. <sentence that says who won>!\" using the ''parameters that were passed to it'' (things that were given to it to work with).","bullet":"black","level":0},{"text":"Finally, we reach the <tt>getCPUMove<\/tt> method. This method randomly chooses what move the computer plays. The first line chooses a random number from just above 0 to just below 3. Then, the number is <em>floored<\/em>, or the decimal part is removed, making it a random integer from 0 to 2. Finally, it is <em>cast<\/em> (changed) to an integer type (it wasn't completely an integer before because of the fractional part), and is stored into <tt>choice<\/tt>. Next, a string <tt>rpsmove<\/tt> is created and set to nothing (&quot;&quot;). Finally, there is a <tt>switch<\/tt> statement, which is a variant of the <tt>if<\/tt> statement.","text_raw":"Finally, we reach the ``getCPUMove`` method. This method randomly chooses what move the computer plays. The first line chooses a random number from just above 0 to just below 3. Then, the number is ''floored'', or the decimal part is removed, making it a random integer from 0 to 2. Finally, it is ''cast'' (changed) to an integer type (it wasn't completely an integer before because of the fractional part), and is stored into ``choice``. Next, a string ``rpsmove`` is created and set to nothing (\"\"). Finally, there is a ``switch`` statement, which is a variant of the ``if`` statement.","bullet":"black","level":0},{"text":"All that it says is if <tt>choice<\/tt> equals 0, then <tt>rpsmove = &quot;rock&quot;<\/tt>. If it equals 1, it is set to &quot;paper&quot;, and if it is none of those (it must be 2), it is set to &quot;scissors&quot;. Then it returns the move in the string <tt>rpsmove<\/tt>. Voil\u00e0! We've returned a random move from the computer! But before I finish, I'd like to point out some things about the <tt>switch<\/tt> statement. Notice that the variable being tested is inside the parentheses next to the word <tt>switch<\/tt>, and that there are <tt>break<\/tt> statements after each <tt>case<\/tt>. All these do is clear the path for the next <tt>case<\/tt>. OK! We're done!","text_raw":"All that it says is if ``choice`` equals 0, then ``rpsmove = \"rock\"``. If it equals 1, it is set to \"paper\", and if it is none of those (it must be 2), it is set to \"scissors\". Then it returns the move in the string ``rpsmove``. Voil\u00e0! We've returned a random move from the computer! But before I finish, I'd like to point out some things about the ``switch`` statement. Notice that the variable being tested is inside the parentheses next to the word ``switch``, and that there are ``break`` statements after each ``case``. All these do is clear the path for the next ``case``. OK! We're done!","bullet":"black","level":0}],"object":null,"images":[{"imageid":16853,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/P6gwPkxFe2mo6fWq"}],"number":8},{"title":"","lines":[{"text":"<strong>Wrap-up:<\/strong>","text_raw":"'''Wrap-up:'''","bullet":"black","level":0},{"text":"Thank you for reading this! It must have taken a great effort to read. It took me a great one to write. I hope that this project got you interested in Java programming (if it didn't bore you to death with all of the explanation), and that you will continue to explore this beautiful language. For a link to the beginning of a  complete tutorial on Java, click <a href=\"http:\/\/download.oracle.com\/javase\/tutorial\/getStarted\/\" rel=\"nofollow\">here<\/a>.","text_raw":"Thank you for reading this! It must have taken a great effort to read. It took me a great one to write. I hope that this project got you interested in Java programming (if it didn't bore you to death with all of the explanation), and that you will continue to explore this beautiful language. For a link to the beginning of a  complete tutorial on Java, click [http:\/\/download.oracle.com\/javase\/tutorial\/getStarted\/|here].","bullet":"black","level":0},{"text":"Good luck!","text_raw":"Good luck!","bullet":"black","level":0}],"object":null,"images":[{"imageid":16855,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/WPI2hd53sgY2dQmU"}],"number":9}],"subject":"","summary":"For this guide, it would be helpful if you have had basic experience in programming, but if you haven't, you'll be fine. I go step by step through all the things you need to begin, and very little to no prior knowledge is assumed.","time_required":"Around 15 minutes","title":"Beginning Object-Oriented Programming: Make a Simple Game With Java","tools":[{"text":"Any computer w\/ internet","notes":"","url":"http:\/\/makeprojects.com\/Item\/Any_computer_w_internet","thumbnail":""}],"type":"project"},"guideid":"935"}