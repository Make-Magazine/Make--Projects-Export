{"device":"Programming","url":"http:\/\/makeprojects.com\/Project\/Get+Started+with+BeagleBone\/2943\/1","guide":{"author":{"text":"Matt Richardson","userid":2583},"categories":["Programming"],"conclusion":"<h3 id=\"Section_Using_Python_to_Control_the_Pins\">Using Python to Control the Pins<\/h3>\n\n<p>As you can see, using pins as digital inputs and outputs is as simple as reading and writing files in the Linux Virtual File System. This means that, without any libraries, you can use any language you\u2019re comfortable with, as long as there\u2019s a compiler or interpreter for that language available on the BeagleBone.<\/p>\n\n<p>The included \u00c5ngstr\u00f6m distribution of Linux even includes a built-in web-based development environment for Node.js called Cloud9. There\u2019s a framework called Bonescript currently under development which can be used for accessing GPIO pins within Node.js.<\/p>\n\n<p>However, when I started my first few programs with the BeagleBone, I decided to use Python because I was more comfortable working in Python than in Node. In my first Python script, I was working with the files manually: opening them, reading or writing them, then closing them each time I wanted to read or write a pin.<\/p>\n\n<p>This became tedious, so I wrote a Python module called mrBBIO, which packages up all those functions into an Arduino-like syntax. It also lets you refer to the pins on the BeagleBone as their physical pin locations, so you don\u2019t need to refer to the System Reference Manual to determine the Linux signal name for the physical pin or figure out how to change its mux setting. (I was inspired by Alexander Hiam\u2019s pyBBIO module, which instead writes to specific memory registers to control the pins.)<\/p>\n\n<p>As long as your BeagleBone is connected to the internet, you can download mrBBIO directly from GitHub. To do so, first change into your home directory:<\/p>\n\n<p><tt>cd ~<\/tt><\/p>\n\n<p>and then download the latest version of mrBBIO:<\/p>\n\n<p><tt>git clone git:\/\/github.co<wbr \/>m\/<\/tt><\/p>\n\n<p><tt>mrichardson23\/m<wbr \/>rBBIO.git<\/tt><\/p>\n\n<p>This will create a directory called mrBBIO. Change to that directory:<\/p>\n\n<p><tt>cd mrBBIO<\/tt><\/p>\n\n<p>If you review the example code (type <tt>cat example.py<\/tt> to see it), you\u2019ll see that it has <tt>setup<\/tt> and <tt>loop<\/tt> functions. Just like Arduino, the <tt>setup<\/tt> function runs once when the code is first executed and then the <tt>loop<\/tt> function runs repeatedly until the program is terminated. The setup function in this example sets pin <tt>P8.12<\/tt> as an output and <tt>P8.45<\/tt> as an input:<\/p>\n\n<p><tt>def setup():<\/tt><\/p>\n\n<p><tt>pinMode(\u201cP8.12\u201d<wbr \/>, OUTPUT)<\/tt><\/p>\n\n<p><tt>pinMode(\u201cP8.45\u201d<wbr \/>, INPUT)<\/tt><\/p>\n\n<p>The <tt>loop<\/tt> function will be checking whether the button is pressed. When it senses that it was pressed, it will turn the LED on for 1 second and then turn it off. It will also output text to the console to indicate when the button was pressed, using an Arduino-like <tt>millis()<\/tt> function.<\/p>\n\n<p>To execute the code from the command line, type:<\/p>\n\n<p><tt>python example.py<\/tt><\/p>\n\n<p>and watch the LED light up when you press the button! To exit the program, type Ctrl-C. The mrBBIO module will take care of unexporting the pins for you.<\/p>\n\n<p>If you\u2019re eager to start experimenting on your own, you can start by using the example file as a template. Make a copy of the file:<\/p>\n\n<p><tt>cp example.py test.py<\/tt><\/p>\n\n<p>and edit it in Nano (or your preferred text<\/p>\n\n<p>editor):<\/p>\n\n<p><tt>nano test.py<\/tt><\/p>\n\n<p>If you\u2019d like, you can even use your computer\u2019s text editor and upload the code to your BeagleBone via SFTP.<\/p>\n\n<p>To dig deeper into embedded Linux, check out <a href=\"http:\/\/elinux.org\" rel=\"nofollow\">elinux.org<\/a>, which covers many different embedded Linux platforms. For specific help with the BeagleBone, try reaching out to the BeagleBone mailing list at <a href=\"http:\/\/groups.google.com\/group\/beaglebone\" rel=\"nofollow\">groups.google.com\/group\/beaglebone<\/a> or connect to the #beagle channel on the Freenode IRC network.<\/p>\n\n<p><strong>This project first appeared in <a href=\"http:\/\/makezine.com\/32\">MAKE Volume 32<\/a>, page 86.<\/strong><\/p>","difficulty":"Moderate","documents":[],"flags":[{"title":"From MAKE Magazine","flagid":"FROM_MAKE","text":"This project first appeared on the pages of MAKE magazine."}],"guideid":2943,"image":{"imageid":54492,"text":"http:\/\/guide-images.makeprojects.org\/igi\/XDuYMbllKJWbTax3"},"introduction":"<p>Many makers love microcontroller platforms like the Arduino, but as the complexity increases in an electronics project, sometimes a microcontroller just won\u2019t cut it and you need something with a little more \u201coomph.\u201d<\/p>\n\n<p>For example, if you want to use a camera and computer vision to detect dirty dishes in your sink, it might be a good idea to explore your options with embedded Linux platforms. These boards are generally more powerful and capable, and are sometimes the perfect solution for projects that are too complex for our beloved microcontroller<wbr \/>s.<\/p>\n\n<p>Not only that, but as the price of embedded Linux platforms drops, the community of support around them grows, which makes them much more accessible to novice and intermediate makers than ever before.<\/p>\n\n<p>The BeagleBone is an embedded Linux development board that\u2019s aimed at hackers and tinkerers. It\u2019s a smaller, more barebones version of the BeagleBoard. Both are open source hardware and use Texas Instrument\u2019s OMAP processors, which are designed for low-power mobile devices.<\/p>\n\n<p>These days, a typical microcontroller-based board costs $20 to $30, while the BeagleBone retails for $89. Other than a more powerful processor, what are you getting for your extra money?<\/p>\n\n<ul><li>Built-in networking: Not only does the BeagleBone have an on-board Ethernet connection, but all the basic networking tools that come packaged with Linux are available. You can use services like FTP, Telnet, and SSH, or even host your own web server on the board. <\/li><li>Remote access: Because of its built-in network services, the BeagleBone makes it much easier to access electronics projects remotely over the internet. For example, if you have a data-logging project, you can download the saved data using an FTP client or you can even have your project email you data automatically. Remote access also allows you to log into the device to update the code.  <\/li><li>Timekeeping: Without extra hardware, the board can keep track of the date and time of day, and it\u2019s updated by pinging internet time servers, ensuring that it\u2019s always accurate.<\/li><li>File system: Just like our computers, embedded Linux platforms have a built-in file system, so storing, organizing, and retrieving data is a fairly trivial matter.<\/li><li>Multiple programming languages: You can write your custom code in almost any language you\u2019re most comfortable with: C, C++, Python, Perl, Ruby, Java, or even a shell script.<\/li><li>Linux software: Much of the Linux software that\u2019s already out there can be run on the BeagleBone. When I needed to access a USB webcam for one of my projects, I simply downloaded and compiled an open source command-line program that let me save webcam images as JPEG files.<\/li><li>Linux support: There\u2019s no shortage of Linux support information on the web, and community help sites like stackoverflow.c<wbr \/>om come in handy when a challenge comes along. <\/li><li>Multitasking: Unlike a basic microcontroller<wbr \/>, embedded Linux platforms can share the processor between concurrently running programs and tasks. For example, if your project needs to upload a large file to a server, it doesn\u2019t need to stop its other functions to wait for the upload.<\/li><li>USB: The BeagleBone can act as both a USB host and a USB device \u2014 not only can you control it from your computer, you can also connect USB devices to it. This makes it easy to integrate common USB peripherals like flash drives, wi-fi adapters, and webcams into your projects.<\/li><li>Size: The BeagleBone packs all these features into a small form factor. In fact, it fits perfectly into an Altoids tin!<\/li><\/ul>\n\n<p>Even though these platforms are becoming easier to work with, it helps to be well versed in digital input and output (I\/O) before tackling embedded Linux for your physical computing projects. Arduino is a great platform for getting started with GPIO (General Purpose Input\/Output); to learn more, visit <a href=\"http:\/\/makezine.com\/arduino\">makezine.com\/arduino<\/a>.<\/p>","introduction_rendered":"<p>Many makers love microcontroller platforms like the Arduino, but as the complexity increases in an electronics project, sometimes a microcontroller just won\u2019t cut it and you need something with a little more \u201coomph.\u201d<\/p>\n\n<p>For example, if you want to use a camera and computer vision to detect dirty dishes in your sink, it might be a good idea to explore your options with embedded Linux platforms. These boards are generally more powerful and capable, and are sometimes the perfect solution for projects that are too complex for our beloved microcontroller<wbr \/>s.<\/p>\n\n<p>Not only that, but as the price of embedded Linux platforms drops, the community of support around them grows, which makes them much more accessible to novice and intermediate makers than ever before.<\/p>\n\n<p>The BeagleBone is an embedded Linux development board that\u2019s aimed at hackers and tinkerers. It\u2019s a smaller, more barebones version of the BeagleBoard. Both are open source hardware and use Texas Instrument\u2019s OMAP processors, which are designed for low-power mobile devices.<\/p>\n\n<p>These days, a typical microcontroller-based board costs $20 to $30, while the BeagleBone retails for $89. Other than a more powerful processor, what are you getting for your extra money?<\/p>\n\n<ul><li>Built-in networking: Not only does the BeagleBone have an on-board Ethernet connection, but all the basic networking tools that come packaged with Linux are available. You can use services like FTP, Telnet, and SSH, or even host your own web server on the board. <\/li><li>Remote access: Because of its built-in network services, the BeagleBone makes it much easier to access electronics projects remotely over the internet. For example, if you have a data-logging project, you can download the saved data using an FTP client or you can even have your project email you data automatically. Remote access also allows you to log into the device to update the code.  <\/li><li>Timekeeping: Without extra hardware, the board can keep track of the date and time of day, and it\u2019s updated by pinging internet time servers, ensuring that it\u2019s always accurate.<\/li><li>File system: Just like our computers, embedded Linux platforms have a built-in file system, so storing, organizing, and retrieving data is a fairly trivial matter.<\/li><li>Multiple programming languages: You can write your custom code in almost any language you\u2019re most comfortable with: C, C++, Python, Perl, Ruby, Java, or even a shell script.<\/li><li>Linux software: Much of the Linux software that\u2019s already out there can be run on the BeagleBone. When I needed to access a USB webcam for one of my projects, I simply downloaded and compiled an open source command-line program that let me save webcam images as JPEG files.<\/li><li>Linux support: There\u2019s no shortage of Linux support information on the web, and community help sites like stackoverflow.c<wbr \/>om come in handy when a challenge comes along. <\/li><li>Multitasking: Unlike a basic microcontroller<wbr \/>, embedded Linux platforms can share the processor between concurrently running programs and tasks. For example, if your project needs to upload a large file to a server, it doesn\u2019t need to stop its other functions to wait for the upload.<\/li><li>USB: The BeagleBone can act as both a USB host and a USB device \u2014 not only can you control it from your computer, you can also connect USB devices to it. This makes it easy to integrate common USB peripherals like flash drives, wi-fi adapters, and webcams into your projects.<\/li><li>Size: The BeagleBone packs all these features into a small form factor. In fact, it fits perfectly into an Altoids tin!<\/li><\/ul>\n\n<p>Even though these platforms are becoming easier to work with, it helps to be well versed in digital input and output (I\/O) before tackling embedded Linux for your physical computing projects. Arduino is a great platform for getting started with GPIO (General Purpose Input\/Output); to learn more, visit <a href=\"http:\/\/makezine.com\/arduino\">makezine.com\/arduino<\/a>.<\/p><div class=\"parts\"><strong>Relevant parts<\/strong><ul><li><a href=\"http:\/\/makeprojects.com\/Item\/BeagleBone_development_board\">BeagleBone development board<\/a><\/li><li><a href=\"http:\/\/www.radioshack.com\/product\/index.jsp?productId=3802149\">Power supply<\/a><\/li><li><a href=\"http:\/\/www.radioshack.com\/product\/index.jsp?productId=2734155\">Breadboard<\/a><\/li><li><a href=\"http:\/\/www.radioshack.com\/product\/index.jsp?productId=12165717\">Jumper wires<\/a><\/li><li><a href=\"http:\/\/www.radioshack.com\/family\/index.jsp?categoryId=2032298\">LED<\/a><\/li><li><a href=\"http:\/\/makeprojects.com\/Item\/resistors\">resistors<\/a><\/li><li><a href=\"http:\/\/www.radioshack.com\/product\/index.jsp?productId=2062508\">Switch, momentary pushbutton<\/a><\/li><li><a href=\"http:\/\/makeprojects.com\/Item\/Computer_with_internet_connection\">Computer with internet connection<\/a><\/li><li><a href=\"http:\/\/makeprojects.com\/Item\/Router_and_Ethernet_cable\">Router and Ethernet cable<\/a><\/li><\/ul><\/div><div class=\"tools\"><strong>Tools<\/strong><ul><li><a href=\"http:\/\/makeprojects.com\/Item\/BeagleBone%E2%80%99s_System_Reference_Manual\">BeagleBone\u2019s System Reference Manual<\/a><\/li><li><a href=\"http:\/\/makeprojects.com\/Item\/PuTTY_an_SSH_Telnet_client_%28optional%29\">PuTTY, an SSH\/Telnet client (optional)<\/a><\/li><li><a href=\"http:\/\/makeprojects.com\/Item\/mrBBIO_Python_module\">mrBBIO Python module<\/a><\/li><li><a href=\"http:\/\/makeprojects.com\/Item\/%C3%85ngstr%C3%B6m_distribution_of_Linux_latest_version\">\u00c5ngstr\u00f6m distribution of Linux, latest  version<\/a><\/li><\/ul><\/div>","locale":"en","parts":[{"text":"BeagleBone development board","notes":"item #MKCCE1 at Maker Shed (makershed.com)","url":"http:\/\/makeprojects.com\/Item\/BeagleBone_development_board","thumbnail":""},{"text":"Power supply","notes":"","url":"http:\/\/www.radioshack.com\/product\/index.jsp?productId=3802149","thumbnail":""},{"text":"Breadboard","notes":"","url":"http:\/\/www.radioshack.com\/product\/index.jsp?productId=2734155","thumbnail":""},{"text":"Jumper wires","notes":"","url":"http:\/\/www.radioshack.com\/product\/index.jsp?productId=12165717","thumbnail":""},{"text":"LED","notes":"","url":"http:\/\/www.radioshack.com\/family\/index.jsp?categoryId=2032298","thumbnail":""},{"text":"resistors","notes":"","url":"http:\/\/makeprojects.com\/Item\/resistors","thumbnail":""},{"text":"Switch, momentary pushbutton","notes":"","url":"http:\/\/www.radioshack.com\/product\/index.jsp?productId=2062508","thumbnail":""},{"text":"Computer with internet connection","notes":"","url":"http:\/\/makeprojects.com\/Item\/Computer_with_internet_connection","thumbnail":""},{"text":"Router and Ethernet cable","notes":"","url":"http:\/\/makeprojects.com\/Item\/Router_and_Ethernet_cable","thumbnail":""}],"prereqs":[],"steps":[{"title":"Get set up via Ethernet.","lines":[{"text":"Your BeagleBone comes with a MicroSD card preloaded with a customized version of the \u00c5ngstr\u00f6m distribution of Linux. Since development on this distribution happens rapidly, you\u2019ll want to update to the latest version, available at <a href=\"http:\/\/beagleboard.org\" rel=\"nofollow\">beagleboard.org.<\/a>","text_raw":"Your BeagleBone comes with a MicroSD card preloaded with a customized version of the \u00c5ngstr\u00f6m distribution of Linux. Since development on this distribution happens rapidly, you\u2019ll want to update to the latest version, available at [http:\/\/beagleboard.org|beagleboard.org.]","bullet":"black","level":0},{"text":"To access the BeagleBone to upload code, you can connect to it over the Ethernet port with SSH, or you can connect it directly to your computer\u2019s USB port. Since we\u2019ll be downloading a few files onto the board directly from the internet, let\u2019s connect to the BeagleBone via Ethernet.","text_raw":"To access the BeagleBone to upload code, you can connect to it over the Ethernet port with SSH, or you can connect it directly to your computer\u2019s USB port. Since we\u2019ll be downloading a few files onto the board directly from the internet, let\u2019s connect to the BeagleBone via Ethernet.","bullet":"black","level":0},{"text":"With the MicroSD card inserted, connect the BeagleBone to your router via Ethernet and plug in a 5V power supply to the BeagleBone.","text_raw":"With the MicroSD card inserted, connect the BeagleBone to your router via Ethernet and plug in a 5V power supply to the BeagleBone.","bullet":"black","level":0}],"object":null,"images":[{"imageid":54491,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/hRcXdFDC3IN2TEvV"},{"imageid":54488,"orderby":2,"text":"http:\/\/guide-images.makeprojects.org\/igi\/4AYo5MbVYRQMgCYw"}],"number":1},{"title":"","lines":[{"text":"On a Mac or Linux box, open a terminal window and type <tt>ssh root@beaglebone.local<\/tt>.","text_raw":"On a Mac or Linux box, open a terminal window and type ``ssh root@beaglebone.local``.","bullet":"black","level":0},{"text":"On a Windows PC, <a href=\"http:\/\/www.chiark.greenend.org.uk\/~sgtatham\/putty\/download.html\" rel=\"nofollow\">download PuTTY<\/a> and open it. Enter <tt>beaglebone.local<\/tt> as the host address, making sure the SSH button is selected, and press Open. When it shows you the prompt <tt>login as:<\/tt>, type <tt>root<\/tt> and press Enter.","text_raw":"On a Windows PC, [http:\/\/www.chiark.greenend.org.uk\/~sgtatham\/putty\/download.html|download PuTTY] and open it. Enter ``beaglebone.local`` as the host address, making sure the SSH button is selected, and press Open. When it shows you the prompt ``login as:``, type ``root`` and press Enter.","bullet":"black","level":0},{"text":"If the address <tt>beaglebone.local<\/tt> doesn\u2019t work, try using the IP address of the board instead. Find your BeagleBone\u2019s IP address by logging into your router and looking for \u201cbeaglebone\u201d on the DHCP clients list.","text_raw":"If the address ``beaglebone.local`` doesn\u2019t work, try using the IP address of the board instead. Find your BeagleBone\u2019s IP address by logging into your router and looking for \u201cbeaglebone\u201d on the DHCP clients list.","bullet":"icon_reminder","level":0}],"object":null,"images":[{"imageid":54493,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/gDgFtsZbXV13nQBg"},{"imageid":54484,"orderby":2,"text":"http:\/\/guide-images.makeprojects.org\/igi\/FhUCpiNcT16QAJ35"},{"imageid":54487,"orderby":3,"text":"http:\/\/guide-images.makeprojects.org\/igi\/cXykGbLKEpgAuSWE"}],"number":2},{"title":"","lines":[{"text":"The first time you connect, your SSH client  may warn you that the host is unknown. It\u2019s OK to dismiss this message.","text_raw":"The first time you connect, your SSH client  may warn you that the host is unknown. It\u2019s OK to dismiss this message.","bullet":"black","level":0},{"text":"There\u2019s no password by default, so just hit Enter. You know you\u2019re connected when you see the <tt>root@beaglebone:~#<\/tt> prompt.","text_raw":"There\u2019s no password by default, so just hit Enter. You know you\u2019re connected when you see the ``root@beaglebone:~#`` prompt.","bullet":"black","level":0}],"object":null,"images":[{"imageid":54486,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/jSjAMEe5nsrIBNMD"}],"number":3},{"title":"Controlling Pins from the Command Line","lines":[{"text":"Before we get into writing code, let\u2019s look at how to do basic digital pin control from the Linux command line. Once we understand how the Linux kernel uses a virtual file system to read and write pins, it makes programming the BeagleBone much easier.","text_raw":"Before we get into writing code, let\u2019s look at how to do basic digital pin control from the Linux command line. Once we understand how the Linux kernel uses a virtual file system to read and write pins, it makes programming the BeagleBone much easier.","bullet":"black","level":0},{"text":"It\u2019s also possible to read and write specific memory registers to access the pins, but that method is more advanced.","text_raw":"It\u2019s also possible to read and write specific memory registers to access the pins, but that method is more advanced.","bullet":"icon_note","level":0}],"object":null,"images":[{"imageid":54496,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/MBbXsSyxlCuGuMmP"}],"number":4},{"title":"Output via GPIO Pins: Light an LED","lines":[{"text":"The BeagleBone has 2 main sets of headers, each with 46 pins. One header is labeled \u201cP8\u201d and the other is labeled \u201cP9.\u201d Only the end pins are labeled, so you\u2019ll have to count pins from the ends to determine the pin you want to access. Put a jumper wire in one of the ground pins, which are pins 1 and 2 of header P8 and P9.","text_raw":"The BeagleBone has 2 main sets of headers, each with 46 pins. One header is labeled \u201cP8\u201d and the other is labeled \u201cP9.\u201d Only the end pins are labeled, so you\u2019ll have to count pins from the ends to determine the pin you want to access. Put a jumper wire in one of the ground pins, which are pins 1 and 2 of header P8 and P9.","bullet":"black","level":0},{"text":"We\u2019ll connect our LED to pin 12 on header P8. Put another jumper in that pin, counting off even numbers from pin 2.","text_raw":"We\u2019ll connect our LED to pin 12 on header P8. Put another jumper in that pin, counting off even numbers from pin 2.","bullet":"black","level":0},{"text":"On a breadboard, connect the cathode (\u2013) of an LED to ground and the anode (+) to pin 12 on header P8 through a current-limiting resistor (any value between 50\u03a9 and 100\u03a9 should do).","text_raw":"On a breadboard, connect the cathode (\u2013) of an LED to ground and the anode (+) to pin 12 on header P8 through a current-limiting resistor (any value between 50\u03a9 and 100\u03a9 should do).","bullet":"black","level":0},{"text":"Figure out the Linux GPIO signal number for pin 12 on P8 (see <em>Deriving the Linux GPIO Signal Number<\/em> in the conclusion).","text_raw":"Figure out the Linux GPIO signal number for pin 12 on P8 (see ''Deriving the Linux GPIO Signal Number'' in the conclusion).","bullet":"black","level":0}],"object":null,"images":[],"number":5},{"title":"","lines":[{"text":"Now that we know which pin number to use within Linux and we\u2019ve set it to GPIO mode (pin 12 defaults to GPIO mode), let\u2019s use the command line to control the pin.","text_raw":"Now that we know which pin number to use within Linux and we\u2019ve set it to GPIO mode (pin 12 defaults to GPIO mode), let\u2019s use the command line to control the pin.","bullet":"black","level":0},{"text":"On the command line, change to the gpio directory: <tt>cd \/sys\/class\/gpio<\/tt>","text_raw":"On the command line, change to the gpio directory: ``cd \/sys\/class\/gpio``","bullet":"black","level":0},{"text":"When you list the contents of the directory with the command <tt>ls<\/tt> you\u2019ll notice there\u2019s no folder for GPIO signal 44. That\u2019s because first we need to export the pin to \u201cuser space\u201d so that we can control it. To do that, write the number 44 to the <em>export<\/em> file: <tt>echo 44 &gt; export<\/tt>","text_raw":"When you list the contents of the directory with the command ``ls`` you\u2019ll notice there\u2019s no folder for GPIO signal 44. That\u2019s because first we need to export the pin to \u201cuser space\u201d so that we can control it. To do that, write the number 44 to the ''export'' file: ``echo 44 > export``","bullet":"black","level":0},{"text":"Now when you type <tt>ls<\/tt> you\u2019ll see the directory <em>gpio44<\/em>. Change to that directory: <tt>cd gpio44<\/tt>","text_raw":"Now when you type ``ls`` you\u2019ll see the directory ''gpio44''. Change to that directory: ``cd gpio44``","bullet":"black","level":0},{"text":"Since we\u2019re trying to control an LED, we\u2019ll need to set the pin as an output by writing the word out to pin 44\u2019s <em>direction<\/em> file: <tt>echo out &gt; direction<\/tt>","text_raw":"Since we\u2019re trying to control an LED, we\u2019ll need to set the pin as an output by writing the word out to pin 44\u2019s ''direction'' file: ``echo out > direction``","bullet":"black","level":0},{"text":"Now we\u2019re ready to set the pin high to illuminate the LED. Write 1 to the <em>value<\/em> file: <tt>echo 1 &gt; value<\/tt>","text_raw":"Now we\u2019re ready to set the pin high to illuminate the LED. Write 1 to the ''value'' file: ``echo 1 > value``","bullet":"black","level":0}],"object":null,"images":[{"imageid":54485,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/ZXt3BxAXIXXcs5b6"}],"number":6},{"title":"Input via GPIO Pins: Read a Button","lines":[{"text":"Using the GPIO pins as an input is just as easy. Here\u2019s how to tell the BeagleBone to read a pushbutton switch.","text_raw":"Using the GPIO pins as an input is just as easy. Here\u2019s how to tell the BeagleBone to read a pushbutton switch.","bullet":"black","level":0},{"text":"Wire up a momentary pushbutton to pin 45 on header P8 with a 10K pull-down resistor. Connect the other side of the button to 3.3V source on header P9 pins 3 or 4.","text_raw":"Wire up a momentary pushbutton to pin 45 on header P8 with a 10K pull-down resistor. Connect the other side of the button to 3.3V source on header P9 pins 3 or 4.","bullet":"black","level":0},{"text":"First, we must export the pin to the user space and change to its directory. Since pin 45 on header P8 is <tt>GPIO2_6<\/tt>, we\u2019ll export pin <tt>gpio70<\/tt>: <tt>echo 70 &gt; \/sys\/class\/gpio\/export cd \/sys\/class\/gpio\/gpio70<\/tt>","text_raw":"First, we must export the pin to the user space and change to its directory. Since pin 45 on header P8 is ``GPIO2_6``, we\u2019ll export pin ``gpio70``: ``echo 70 > \/sys\/class\/gpio\/export cd \/sys\/class\/gpio\/gpio70``","bullet":"black","level":0},{"text":"Set the pin direction as an input: <tt>echo in &gt; direction<\/tt>","text_raw":"Set the pin direction as an input: ``echo in > direction``","bullet":"black","level":0},{"text":"Now instead of writing the <em>value<\/em> file, we\u2019ll read it: <tt>cat value<\/tt>","text_raw":"Now instead of writing the ''value'' file, we\u2019ll read it: ``cat value``","bullet":"black","level":0},{"text":"This should return <tt>0<\/tt> for a low pin. Now press and hold the button while you execute the <tt>cat value<\/tt> command again. If you have the button wired up correctly, you should now see a <tt>1<\/tt>, indicating the pin is high.","text_raw":"This should return ``0`` for a low pin. Now press and hold the button while you execute the ``cat value`` command again. If you have the button wired up correctly, you should now see a ``1``, indicating the pin is high.","bullet":"black","level":0},{"text":"When you\u2019re done with the pins, be sure to unexport them from the userspace: <tt>echo 44 &gt; \/sys\/class\/gpio\/unexport<\/tt> and <tt>echo 70 &gt; \/sys\/class\/gpio\/unexport<\/tt>","text_raw":"When you\u2019re done with the pins, be sure to unexport them from the userspace: ``echo 44 > \/sys\/class\/gpio\/unexport`` and ``echo 70 > \/sys\/class\/gpio\/unexport``","bullet":"black","level":0}],"object":null,"images":[{"imageid":54561,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/3oMIXulDo1CFBDvF"}],"number":7}],"subject":"","summary":"Got a project too big for a microcontroller? This embedded Linux board offers powerful features in a small package.","time_required":"","title":"Get Started with BeagleBone","tools":[{"text":"BeagleBone\u2019s System Reference Manual","notes":"","url":"http:\/\/makeprojects.com\/Item\/BeagleBone%E2%80%99s_System_Reference_Manual","thumbnail":""},{"text":"PuTTY, an SSH\/Telnet client (optional)","notes":"","url":"http:\/\/makeprojects.com\/Item\/PuTTY_an_SSH_Telnet_client_%28optional%29","thumbnail":""},{"text":"mrBBIO Python module","notes":"","url":"http:\/\/makeprojects.com\/Item\/mrBBIO_Python_module","thumbnail":""},{"text":"\u00c5ngstr\u00f6m distribution of Linux, latest  version","notes":"","url":"http:\/\/makeprojects.com\/Item\/%C3%85ngstr%C3%B6m_distribution_of_Linux_latest_version","thumbnail":""}],"type":"project"},"guideid":"2943"}