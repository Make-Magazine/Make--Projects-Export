{"device":"Arduino","url":"http:\/\/makeprojects.com\/Project\/Aquaponics+-+Online+Temperature+and+Humidity\/3375\/1","guide":{"author":{"text":"IAquaponics","userid":16859},"categories":["Arduino","Garden"],"conclusion":"<p>If you incorporate this into your own project, send us a screenshot, we'd love to see it.<\/p>","difficulty":"Easy","documents":[],"flags":[{"title":"Missing Images","flagid":"GUIDE_MISSING_IMAGES","text":"This guide contains steps that are missing images."},{"title":"User-Contributed Project","flagid":"GUIDE_USER_CONTRIBUTED","text":"This project guide is not managed by MAKE staff."}],"guideid":3375,"image":{"imageid":58794,"text":"http:\/\/guide-images.makeprojects.org\/igi\/VNOsdopsUQ2VXY22"},"introduction":"<p>This project is a part of the Arduino Data Acquisition and Control System described in the upcoming book <a href=\"http:\/\/www.iowa-aquaponics.com\/p\/automating-aquaponics-with-arduino.html\" rel=\"nofollow\">Automating Aquaponics with Arduino<\/a>.<\/p>\n\n<p>While this project is designed with aquaponics in mind, it does not require an aquaponic system, making it useful for other projects such as home automation.  The included application is, therefore, bare-bones, making it easier to integrate into any other App Engine project.<\/p>\n\n<p>How It Works<\/p>\n\n<p>Every sixty seconds, the Arduino will test its connection to App Engine.  The return should be \u201cOk\u201d, which is parsed by the Arduino.  If the connection is ok, the bicolor LED is set to green, otherwise it is set to red.  If the connection is good, the Arduino will take a reading from digital pin six (the DHT pin) and create a GET request to App Engine.  App Engine will query the datastore (its database) for the Environment entity, update the temperature and relative humidity values and put the entity back in the datastore.<\/p>\n\n<p>On startup, the web browser (client) will create a temperature and humidity gauge with values at zero.  It will then make an AJAX request to the datastore which will return a JSON array.  The client parses the array and updates the gauges.  Finally, it sets an interval to repeat the process, giving you an updated display.<\/p>\n\n<p>Software Versions:<\/p>\n\n<p>1.  Arduino IDE: Arduino-1.0.3<\/p>\n\n<p>2.  App Engine SDK:  Python, Linux, 1.7.4<\/p>\n\n<p>3.  Python: Python2.7<\/p>\n\n<p>4.  Ubuntu 12.04<\/p>\n\n<p>5.  Adafruit's DHT Arduino library<\/p>\n\n<p>Update<\/p>\n\n<p>I removed the dependency on the Timer library - it simply wasn't needed for this application.<\/p>\n\n<p>The Arduino code has been updated.<\/p>\n\n<p>For whatever reason, the Arduino fails to connect on the third HTMLRequest.  I don't know why, but it works flawlessly after that.  It may have something to do with the Arduino code for Linux, or not.  For this application, it means the second attempt to testConnection will fail, but every request after that will work.<\/p>\n\n<p>Finally, I have the serial output on by default.  In application, you'll want to comment this out, or the counter integer will grow very large.<\/p>","introduction_rendered":"<p>This project is a part of the Arduino Data Acquisition and Control System described in the upcoming book <a href=\"http:\/\/www.iowa-aquaponics.com\/p\/automating-aquaponics-with-arduino.html\" rel=\"nofollow\">Automating Aquaponics with Arduino<\/a>.<\/p>\n\n<p>While this project is designed with aquaponics in mind, it does not require an aquaponic system, making it useful for other projects such as home automation.  The included application is, therefore, bare-bones, making it easier to integrate into any other App Engine project.<\/p>\n\n<p>How It Works<\/p>\n\n<p>Every sixty seconds, the Arduino will test its connection to App Engine.  The return should be \u201cOk\u201d, which is parsed by the Arduino.  If the connection is ok, the bicolor LED is set to green, otherwise it is set to red.  If the connection is good, the Arduino will take a reading from digital pin six (the DHT pin) and create a GET request to App Engine.  App Engine will query the datastore (its database) for the Environment entity, update the temperature and relative humidity values and put the entity back in the datastore.<\/p>\n\n<p>On startup, the web browser (client) will create a temperature and humidity gauge with values at zero.  It will then make an AJAX request to the datastore which will return a JSON array.  The client parses the array and updates the gauges.  Finally, it sets an interval to repeat the process, giving you an updated display.<\/p>\n\n<p>Software Versions:<\/p>\n\n<p>1.  Arduino IDE: Arduino-1.0.3<\/p>\n\n<p>2.  App Engine SDK:  Python, Linux, 1.7.4<\/p>\n\n<p>3.  Python: Python2.7<\/p>\n\n<p>4.  Ubuntu 12.04<\/p>\n\n<p>5.  Adafruit's DHT Arduino library<\/p>\n\n<p>Update<\/p>\n\n<p>I removed the dependency on the Timer library - it simply wasn't needed for this application.<\/p>\n\n<p>The Arduino code has been updated.<\/p>\n\n<p>For whatever reason, the Arduino fails to connect on the third HTMLRequest.  I don't know why, but it works flawlessly after that.  It may have something to do with the Arduino code for Linux, or not.  For this application, it means the second attempt to testConnection will fail, but every request after that will work.<\/p>\n\n<p>Finally, I have the serial output on by default.  In application, you'll want to comment this out, or the counter integer will grow very large.<\/p><div class=\"parts\"><strong>Relevant parts<\/strong><ul><li><a href=\"http:\/\/makeprojects.com\/Item\/Arduino_Uno_R3\">Arduino Uno R3<\/a><\/li><li><a href=\"http:\/\/www.radioshack.com\/product\/index.jsp?productId=2062549\">LED, 2-lead bicolor<\/a><\/li><li><a href=\"https:\/\/www.jameco.com\/webapp\/wcs\/stores\/servlet\/Product_10001_10001_690785_-1\">1\/4W 470 ohm resistor<\/a><\/li><li><a href=\"http:\/\/makeprojects.com\/Item\/1_4W_4.7k_ohm_resistor\">1\/4W 4.7k ohm resistor<\/a><\/li><li><a href=\"https:\/\/www.sparkfun.com\/products\/10167\">DHT22<\/a><\/li><li><a href=\"http:\/\/makeprojects.com\/Item\/Breadboard_jumper_wires_or_solid_core_22AWG_wire\">Breadboard jumper wires, or solid core 22AWG wire<\/a><\/li><li><a href=\"http:\/\/www.radioshack.com\/product\/index.jsp?productId=2734155\">Small Breadboard<\/a><\/li><li><a href=\"http:\/\/makeprojects.com\/Item\/Arduino_Ethernet_Shield\">Arduino Ethernet Shield<\/a><\/li><li><a href=\"http:\/\/makeprojects.com\/Item\/Arduino_Power_Cord\">Arduino Power Cord<\/a><\/li><\/ul><\/div>","locale":"en","parts":[{"text":"Arduino Uno R3","notes":"","url":"http:\/\/makeprojects.com\/Item\/Arduino_Uno_R3","thumbnail":""},{"text":"LED, 2-lead bicolor","notes":"","url":"http:\/\/www.radioshack.com\/product\/index.jsp?productId=2062549","thumbnail":""},{"text":"1\/4W 470 ohm resistor","notes":"","url":"https:\/\/www.jameco.com\/webapp\/wcs\/stores\/servlet\/Product_10001_10001_690785_-1","thumbnail":""},{"text":"1\/4W 4.7k ohm resistor","notes":"","url":"http:\/\/makeprojects.com\/Item\/1_4W_4.7k_ohm_resistor","thumbnail":""},{"text":"DHT22","notes":"","url":"https:\/\/www.sparkfun.com\/products\/10167","thumbnail":""},{"text":"Breadboard jumper wires, or solid core 22AWG wire","notes":"","url":"http:\/\/makeprojects.com\/Item\/Breadboard_jumper_wires_or_solid_core_22AWG_wire","thumbnail":""},{"text":"Small Breadboard","notes":"","url":"http:\/\/www.radioshack.com\/product\/index.jsp?productId=2734155","thumbnail":""},{"text":"Arduino Ethernet Shield","notes":"","url":"http:\/\/makeprojects.com\/Item\/Arduino_Ethernet_Shield","thumbnail":""},{"text":"Arduino Power Cord","notes":"","url":"http:\/\/makeprojects.com\/Item\/Arduino_Power_Cord","thumbnail":""}],"prereqs":[],"steps":[{"title":"","lines":[{"text":"Install Adafruit's <a href=\"https:\/\/github.com\/adafruit\/DHT-sensor-library\" rel=\"nofollow\">DHT library<\/a>.","text_raw":"Install Adafruit's [https:\/\/github.com\/adafruit\/DHT-sensor-library|DHT library].","bullet":"black","level":0},{"text":"Make sure the DHT library is named &quot;DHT&quot;.","text_raw":"Make sure the DHT library is named \"DHT\".","bullet":"black","level":0}],"object":null,"images":[{"imageid":58813,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/wLP5jIGKMhMMHnBy"}],"number":1},{"title":"","lines":[{"text":"If you don't already have a free Google account, sign-up for one.","text_raw":"If you don't already have a free Google account, sign-up for one.","bullet":"black","level":0},{"text":"Use your Google account to <a href=\"https:\/\/developers.google.com\/appengine\/\" rel=\"nofollow\">sign-up<\/a> for App Engine.","text_raw":"Use your Google account to [https:\/\/developers.google.com\/appengine\/|sign-up] for App Engine.","bullet":"black","level":0},{"text":"Next, <a href=\"https:\/\/developers.google.com\/appengine\/downloads\" rel=\"nofollow\">download<\/a> the App Engine SDK.  The version used here was 1.7.4","text_raw":"Next, [https:\/\/developers.google.com\/appengine\/downloads|download] the App Engine SDK.  The version used here was 1.7.4","bullet":"black","level":0},{"text":"In the App Engine Admin Console, create a new project.  The final URL for the project name will be: http:\/\/&lt;projectname&gt;.appspot.c<wbr \/>om.  Also, take note of the login security.  You can choose Google Accounts, Google Apps for Business Domain, or OpenID.","text_raw":"In the App Engine Admin Console, create a new project.  The final URL for the project name will be: http:\/\/<projectname>.appspot.com.  Also, take note of the login security.  You can choose Google Accounts, Google Apps for Business Domain, or OpenID.","bullet":"black","level":0},{"text":"<a href=\"https:\/\/docs.google.com\/file\/d\/0B39MCs--h0-TRUxBamQteHZEa0E\/edit?usp=sharing\" rel=\"nofollow\">Download<\/a> the project tar file and extract it in your home directory (Ubuntu).  Inside you will find the GAE directory labelled myapsystem and the Arduino folder containing the Arduino file.]","text_raw":"[https:\/\/docs.google.com\/file\/d\/0B39MCs--h0-TRUxBamQteHZEa0E\/edit?usp=sharing|Download] the project tar file and extract it in your home directory (Ubuntu).  Inside you will find the GAE directory labelled myapsystem and the Arduino folder containing the Arduino file.]","bullet":"black","level":0},{"text":"Go into the myapsystem directory and open &quot;app.yaml&quot;.  On the first line you will see the application name.  Replace the highlighted name with the identifier you created earlier.  See the second image.","text_raw":"Go into the myapsystem directory and open \"app.yaml\".  On the first line you will see the application name.  Replace the highlighted name with the identifier you created earlier.  See the second image.","bullet":"black","level":0},{"text":"One final note on security.  At the bottom of the &quot;app.yaml&quot; file you will see that the script &quot;main.app&quot; requires admin to login, but no other script says this.  This application is not secure beyond the first page.  A thorough discussion on security is outside the scope of this project, but be aware.","text_raw":"One final note on security.  At the bottom of the \"app.yaml\" file you will see that the script \"main.app\" requires admin to login, but no other script says this.  This application is not secure beyond the first page.  A thorough discussion on security is outside the scope of this project, but be aware.","bullet":"black","level":0}],"object":null,"images":[{"imageid":59287,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/GdIgYVK2PxtcycPS"},{"imageid":58809,"orderby":2,"text":"http:\/\/guide-images.makeprojects.org\/igi\/qZKs2EyFgYDUM3pr"}],"number":2},{"title":"","lines":[{"text":"To launch the GAE SDK, open up a terminal and type: &quot;python2.7 AppEngine\/dev_appserver.py IAquaponics_DHT\/myapsystem&quot;.  If you renamed the project folder, or put it outside your home directory, change the path accordingly.","text_raw":"To launch the GAE SDK, open up a terminal and type: \"python2.7 AppEngine\/dev_appserver.py IAquaponics_DHT\/myapsystem\".  If you renamed the project folder, or put it outside your home directory, change the path accordingly.","bullet":"black","level":0},{"text":"Launch a web browser and go to: &quot;http:\/\/localhost:8080\/&quot;.  If all went well, you should see a login prompt.  Click the checkbox &quot;Login as administrator&quot; and login.  The email address doesn't matter.","text_raw":"Launch a web browser and go to: \"http:\/\/localhost:8080\/\".  If all went well, you should see a login prompt.  Click the checkbox \"Login as administrator\" and login.  The email address doesn't matter.","bullet":"black","level":0},{"text":"At this point you should see two gauges that read zero.  To make sure everything is working, we are going to replicate the call the Arduino will make.  In the browser, type in: &quot;http:\/\/localhost:8080\/adacs\/d<wbr \/>ht?Temp=69.1&amp;RH=24.8&quot;.  This will present a page that says, &quot;Ok&quot;.","text_raw":"At this point you should see two gauges that read zero.  To make sure everything is working, we are going to replicate the call the Arduino will make.  In the browser, type in: \"http:\/\/localhost:8080\/adacs\/dht?Temp=69.1&RH=24.8\".  This will present a page that says, \"Ok\".","bullet":"black","level":0},{"text":"Now go back to the previous screen and you should see the gauges update.  Ideally, you should see figure three.","text_raw":"Now go back to the previous screen and you should see the gauges update.  Ideally, you should see figure three.","bullet":"black","level":0}],"object":null,"images":[{"imageid":58799,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/Dv15GYAxdt1TylKi"},{"imageid":58798,"orderby":2,"text":"http:\/\/guide-images.makeprojects.org\/igi\/t6TSNIHnBcR1CEuF"},{"imageid":58797,"orderby":3,"text":"http:\/\/guide-images.makeprojects.org\/igi\/e154gRehf6OgK2fH"}],"number":3},{"title":"","lines":[{"text":"If all went well, it's time to upload the webapp to GAE.  From the command line, change directories into your GAE folder and type: &quot;.\/appcfg.py update ~\/IAquaponics_DHT\/myapsystem&quot;.  Again, substitute your path.","text_raw":"If all went well, it's time to upload the webapp to GAE.  From the command line, change directories into your GAE folder and type: \".\/appcfg.py update ~\/IAquaponics_DHT\/myapsystem\".  Again, substitute your path.","bullet":"black","level":0},{"text":"You will probably be prompted to login with your email and password.","text_raw":"You will probably be prompted to login with your email and password.","bullet":"black","level":0},{"text":"When the update has done, go to your webapp:  &quot;<a href=\"http:\/\/myapsystem.appspot.com%22\" rel=\"nofollow\">http:\/\/myapsystem.appspot.com&quot;<\/a>.  If you are not already logged in, you will log in to Google normally.  Finally, you will see the home page.","text_raw":"When the update has done, go to your webapp:  \"http:\/\/myapsystem.appspot.com\".  If you are not already logged in, you will log in to Google normally.  Finally, you will see the home page.","bullet":"black","level":0},{"text":"If your gauges are zero, go ahead and fake the Arduino call again, and return back to the home page.  It should look the same as the localhost app.","text_raw":"If your gauges are zero, go ahead and fake the Arduino call again, and return back to the home page.  It should look the same as the localhost app.","bullet":"black","level":0}],"object":null,"images":[],"number":4},{"title":"","lines":[{"text":"Wire up your breadboard as shown in the Fritzing diagram.  Please note, the Ethernet shield is not shown, but the jumper wires plug into the Ethernet Shield which resides on top of the Arduino.","text_raw":"Wire up your breadboard as shown in the Fritzing diagram.  Please note, the Ethernet shield is not shown, but the jumper wires plug into the Ethernet Shield which resides on top of the Arduino.","bullet":"black","level":0},{"text":"The 470 ohm resistor is used by the bi-color LED, and the 4.7 k is used by the DHT.","text_raw":"The 470 ohm resistor is used by the bi-color LED, and the 4.7 k is used by the DHT.","bullet":"black","level":0}],"object":null,"images":[{"imageid":58807,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/DybansSNkQCuiNqa"}],"number":5},{"title":"","lines":[{"text":"Load the Arduino file.  Select Arduino Uno board and your serial port.","text_raw":"Load the Arduino file.  Select Arduino Uno board and your serial port.","bullet":"black","level":0},{"text":"Now, amend the Arduino file with your project name.  There are three locations where the URL is mentioned.  Change ONLY your project name.  In the default case, the project is called &quot;myapsystem&quot;.  When you change the URL, do NOT change the &quot;.appspot.com\/....&quot; part, only the project name.  There are three places where it must change.","text_raw":"Now, amend the Arduino file with your project name.  There are three locations where the URL is mentioned.  Change ONLY your project name.  In the default case, the project is called \"myapsystem\".  When you change the URL, do NOT change the \".appspot.com\/....\" part, only the project name.  There are three places where it must change.","bullet":"black","level":0},{"text":"Save and upload the Arduino code.  Optionally, it would be helpful to open a serial monitor.","text_raw":"Save and upload the Arduino code.  Optionally, it would be helpful to open a serial monitor.","bullet":"black","level":0},{"text":"Finally, open your app's home page and watch the gauges change.","text_raw":"Finally, open your app's home page and watch the gauges change.","bullet":"black","level":0}],"object":null,"images":[{"imageid":59283,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/6uPMnSnmi32qHfeg"},{"imageid":59284,"orderby":2,"text":"http:\/\/guide-images.makeprojects.org\/igi\/TlUce4OMMlx1wuTe"},{"imageid":59285,"orderby":3,"text":"http:\/\/guide-images.makeprojects.org\/igi\/2DlNBv2YmQZUIWqN"}],"number":6},{"title":"","lines":[{"text":"Note:  It may take the Arduino a few tries to connect if there are no instances of your app already running.","text_raw":"Note:  It may take the Arduino a few tries to connect if there are no instances of your app already running.","bullet":"black","level":0},{"text":"There is a flaw with this code, whose remedy wasn't included.  This was to ease integration into existing apps.  Basically, if the Arduino were to stop communicating, you wouldn't know without looking at the log in your Admin Dashboard.  The gauges would stay the same.","text_raw":"There is a flaw with this code, whose remedy wasn't included.  This was to ease integration into existing apps.  Basically, if the Arduino were to stop communicating, you wouldn't know without looking at the log in your Admin Dashboard.  The gauges would stay the same.","bullet":"black","level":0},{"text":"The solution was to create a timestamp every time the Arduino contacted GAE.  A deferred task was created for five minutes later.","text_raw":"The solution was to create a timestamp every time the Arduino contacted GAE.  A deferred task was created for five minutes later.","bullet":"black","level":0},{"text":"After the five minutes, the task would evaluate its current time to the timestamp of the Arduino's last contact.","text_raw":"After the five minutes, the task would evaluate its current time to the timestamp of the Arduino's last contact.","bullet":"black","level":0},{"text":"If that time exceeded double the Arduino's normal contact time interval (60 s =&gt; 120s), an email alert would be created to notify the user of the connection loss and the values would return to zero.","text_raw":"If that time exceeded double the Arduino's normal contact time interval (60 s => 120s), an email alert would be created to notify the user of the connection loss and the values would return to zero.","bullet":"black","level":0}],"object":null,"images":[],"number":7}],"subject":"","summary":"The project uses the DHT22 sensor to monitor temperature and relative humidity in an aquaponics system.  The data is uploaded to a bare-bones application on Google App Engine and visualized with Google Chart Tools.","time_required":"30 minutes","title":"Aquaponics - Online Temperature and Humidity","tools":[],"type":"project"},"guideid":"3375"}