{"device":"Arduino","url":"http:\/\/makeprojects.com\/Project\/Arduino+in+C%3A+See+Your+Microcontroller+in+a+New+Way\/965\/1","guide":{"author":{"text":"Chandler","userid":3920},"categories":["Arduino","Programming"],"conclusion":"","difficulty":"Moderate","documents":[{"text":"AVR-GCC-FILES.pdf","url":"http:\/\/make-documents.s3.amazonaws.com\/ITTbdsD1BjwqCLCl.pdf","documentid":161}],"flags":[{"title":"User-Contributed Project","flagid":"GUIDE_USER_CONTRIBUTED","text":"This project guide is not managed by MAKE staff."}],"guideid":965,"image":{"imageid":17646,"text":"http:\/\/guide-images.makeprojects.org\/igi\/XfFKJpGRGtlYumIo"},"introduction":"<p>For this project, you need to have a <em>Linux<\/em> computer, or else the things I describe will not work. Don't fret, though, because there are plenty of tutorials out there that will help you. Piecing this together from multiple sources has been hard, but I've been able to do it on my Arduino Duemilanove and Arduino clone. Finally, I would like to say thanks to the following sources, because they helped me the most and may help you. All of my code and setup was based on these tutorials! Thank you!<\/p>\n\n<p><a href=\"http:\/\/www.javiervalcarce.eu\/wiki\/Program_Arduino_with_AVR-GCC\" rel=\"nofollow\" title=\"http:\/\/www.javiervalcarce.eu\/wiki\/Program_Arduino_with_AVR-GCC\">http:\/\/www.javiervalcarce.eu\/wiki\/Progra...<\/a><\/p>\n\n<p><a href=\"http:\/\/iamsuhasm.wordpress.com\/tutsproj\/avr-gcc-tutorial\/\" rel=\"nofollow\" title=\"http:\/\/iamsuhasm.wordpress.com\/tutsproj\/avr-gcc-tutorial\/\">http:\/\/iamsuhasm.wordpress.com\/tutsproj\/...<\/a><\/p>\n\n<p><a href=\"https:\/\/www.mainframe.cx\/~ckuethe\/avr-c-tutorial\/\" rel=\"nofollow\" title=\"https:\/\/www.mainframe.cx\/~ckuethe\/avr-c-tutorial\/\">https:\/\/www.mainframe.cx\/~ckuethe\/avr-c-...<\/a><\/p>\n\n<p><a href=\"http:\/\/www.micahcarrick.com\/avr-tutorial-digital-output.html\" rel=\"nofollow\" title=\"http:\/\/www.micahcarrick.com\/avr-tutorial-digital-output.html\">http:\/\/www.micahcarrick.com\/avr-tutorial...<\/a><\/p>","introduction_rendered":"<p>For this project, you need to have a <em>Linux<\/em> computer, or else the things I describe will not work. Don't fret, though, because there are plenty of tutorials out there that will help you. Piecing this together from multiple sources has been hard, but I've been able to do it on my Arduino Duemilanove and Arduino clone. Finally, I would like to say thanks to the following sources, because they helped me the most and may help you. All of my code and setup was based on these tutorials! Thank you!<\/p>\n\n<p><a href=\"http:\/\/www.javiervalcarce.eu\/wiki\/Program_Arduino_with_AVR-GCC\" rel=\"nofollow\" title=\"http:\/\/www.javiervalcarce.eu\/wiki\/Program_Arduino_with_AVR-GCC\">http:\/\/www.javiervalcarce.eu\/wiki\/Progra...<\/a><\/p>\n\n<p><a href=\"http:\/\/iamsuhasm.wordpress.com\/tutsproj\/avr-gcc-tutorial\/\" rel=\"nofollow\" title=\"http:\/\/iamsuhasm.wordpress.com\/tutsproj\/avr-gcc-tutorial\/\">http:\/\/iamsuhasm.wordpress.com\/tutsproj\/...<\/a><\/p>\n\n<p><a href=\"https:\/\/www.mainframe.cx\/~ckuethe\/avr-c-tutorial\/\" rel=\"nofollow\" title=\"https:\/\/www.mainframe.cx\/~ckuethe\/avr-c-tutorial\/\">https:\/\/www.mainframe.cx\/~ckuethe\/avr-c-...<\/a><\/p>\n\n<p><a href=\"http:\/\/www.micahcarrick.com\/avr-tutorial-digital-output.html\" rel=\"nofollow\" title=\"http:\/\/www.micahcarrick.com\/avr-tutorial-digital-output.html\">http:\/\/www.micahcarrick.com\/avr-tutorial...<\/a><\/p><div class=\"parts\"><strong>Relevant parts<\/strong><ul><li><a href=\"http:\/\/www.makershed.com\/ProductDetails.asp?ProductCode=MKSP4\">Arduino microcontroller<\/a><\/li><\/ul><\/div><div class=\"tools\"><strong>Tools<\/strong><ul><li><a href=\"http:\/\/makeprojects.com\/Item\/Computer_running_Linux\">Computer running Linux<\/a><\/li><li><a href=\"http:\/\/makeprojects.com\/Item\/USB_A_to_B_cable\">USB A to B cable<\/a><\/li><\/ul><\/div>","locale":"en","parts":[{"text":"Arduino microcontroller","notes":"","url":"http:\/\/www.makershed.com\/ProductDetails.asp?ProductCode=MKSP4","thumbnail":""}],"prereqs":[],"steps":[{"title":"","lines":[{"text":"After you have all of your parts (note that the USB cable can be replaced with another programmer, as long as you can program your Arduino or Arduino clone), you can begin installing avr-gcc (the C compiler for the Arduino). On Ubuntu, in a terminal window type:","text_raw":"After you have all of your parts (note that the USB cable can be replaced with another programmer, as long as you can program your Arduino or Arduino clone), you can begin installing avr-gcc (the C compiler for the Arduino). On Ubuntu, in a terminal window type:","bullet":"black","level":0},{"text":"<tt>sudo apt-get install gcc-avr<\/tt>","text_raw":"``sudo apt-get install gcc-avr``","bullet":"black","level":1},{"text":"Enter your root password, and that should do it.","text_raw":"Enter your root password, and that should do it.","bullet":"black","level":0},{"text":"For other distrubutions of Linux, install the gcc-avr package in the same way that you would another package.","text_raw":"For other distrubutions of Linux, install the gcc-avr package in the same way that you would another package.","bullet":"black","level":0}],"object":null,"images":[{"imageid":17639,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/vAv4VmMSM1nyhRCS"}],"number":1},{"title":"","lines":[{"text":"Once that's done, you can begin. Create a new folder on your desktop called &quot;AVR-GCC_FORMAT&quot; or something like that. Open it and read all of the instructions. Once done with that, you can move on.","text_raw":"Once that's done, you can begin. Create a new folder on your desktop called \"AVR-GCC_FORMAT\" or something like that. Open it and read all of the instructions. Once done with that, you can move on.","bullet":"black","level":0}],"object":null,"images":[{"imageid":17641,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/GsTrMd2nSDNa2j5W"}],"number":2},{"title":"","lines":[{"text":"Now that you've done that, let's talk about what just happened. The Makefile is what compiles the &quot;file.c&quot; file and dispenses a .hex file, along with a bunch of other stuff. To set the makefile to your Arduino, you might have to tweak it a bit. If your Arduino is running on an ATmega328P, you're fine and can move on. If you are running any other chip (such as an ATTiny or another version of the ATmega), you will have to change the MCU_TARGET variable in the Makefile. Simply go into it, and place a # before the line:","text_raw":"Now that you've done that, let's talk about what just happened. The Makefile is what compiles the \"file.c\" file and dispenses a .hex file, along with a bunch of other stuff. To set the makefile to your Arduino, you might have to tweak it a bit. If your Arduino is running on an ATmega328P, you're fine and can move on. If you are running any other chip (such as an ATTiny or another version of the ATmega), you will have to change the MCU_TARGET variable in the Makefile. Simply go into it, and place a # before the line:","bullet":"black","level":0},{"text":"<tt>MCU_TARGET = atmega328p<\/tt>","text_raw":"``MCU_TARGET = atmega328p``","bullet":"black","level":1},{"text":"The # denotes a comment, so you're &quot;commenting out&quot; that line of code. Then, find the chip that's yours (say it's an ATmega168) and remove the # before that line. Save the file, and you're done.","text_raw":"The # denotes a comment, so you're \"commenting out\" that line of code. Then, find the chip that's yours (say it's an ATmega168) and remove the # before that line. Save the file, and you're done.","bullet":"black","level":0},{"text":"Now, you can rename file.c if you want to. This is quite a dull name, after all. I'd recommend <tt>flashlight.c<\/tt>, but anything works if it ends in &quot;.c&quot; (and follows a bunch of weird restrictions that you must be aware of). I'd strongly recommend just to go with <tt>flashlight.c<\/tt>.","text_raw":"Now, you can rename file.c if you want to. This is quite a dull name, after all. I'd recommend ``flashlight.c``, but anything works if it ends in \".c\" (and follows a bunch of weird restrictions that you must be aware of). I'd strongly recommend just to go with ``flashlight.c``.","bullet":"black","level":0},{"text":"After changing that, you have to change the Makefile's first two lines to:","text_raw":"After changing that, you have to change the Makefile's first two lines to:","bullet":"black","level":0},{"text":"<tt>PRG = flashlight<\/tt>","text_raw":"``PRG = flashlight``","bullet":"black","level":1},{"text":"<tt>OBJ = flashlight.o<\/tt>","text_raw":"``OBJ = flashlight.o``","bullet":"black","level":1},{"text":"so that the Makefile knows what it's compiling.","text_raw":"so that the Makefile knows what it's compiling.","bullet":"black","level":0}],"object":null,"images":[{"imageid":17644,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/BtWmp2RQKevjcGeZ"},{"imageid":17648,"orderby":2,"text":"http:\/\/guide-images.makeprojects.org\/igi\/o2NMOiRMhJOgWJYr"}],"number":3},{"title":"","lines":[{"text":"Now let's get to compiling and downloading!","text_raw":"Now let's get to compiling and downloading!","bullet":"black","level":0},{"text":"First, make a copy on the desktop of your AVR-GCC_FORMAT folder. Then, open a terminal window and <tt>cd<\/tt> to that folder. Type the command <tt>make<\/tt> and the makefile will run. A bunch of files will appear. This is why I recommended that you do this inside a folder rather than on your desktop or in your home folder.","text_raw":"First, make a copy on the desktop of your AVR-GCC_FORMAT folder. Then, open a terminal window and ``cd`` to that folder. Type the command ``make`` and the makefile will run. A bunch of files will appear. This is why I recommended that you do this inside a folder rather than on your desktop or in your home folder.","bullet":"black","level":0},{"text":"Now, once you're done with that, plug in your Arduino and type the following in the terminal window (make sure to reset your Arduino just before entering the command):","text_raw":"Now, once you're done with that, plug in your Arduino and type the following in the terminal window (make sure to reset your Arduino just before entering the command):","bullet":"black","level":0},{"text":"<tt>avrdude -p <em>version<\/em> -P <em>location<\/em> -c stk500v1 -u -U -F flash:w:<em>filename<\/em>.hex<\/tt>","text_raw":"``avrdude -p ''version'' -P ''location'' -c stk500v1 -u -U -F flash:w:''filename''.hex``","bullet":"black","level":1},{"text":"Make sure you replace <em>version<\/em> with the name of your chip (m328p for ATmega328P, m168 for ATmega168, or type in something random to cause an error and you'll get the rest of the list).","text_raw":"Make sure you replace ''version'' with the name of your chip (m328p for ATmega328P, m168 for ATmega168, or type in something random to cause an error and you'll get the rest of the list).","bullet":"black","level":0},{"text":"<em>location<\/em> should be replaced with something like \/dev\/ttyUSB0 if that's the location of your Arduino (if you're not sure, and it's plugged into a USB port, try that first).","text_raw":"''location'' should be replaced with something like \/dev\/ttyUSB0 if that's the location of your Arduino (if you're not sure, and it's plugged into a USB port, try that first).","bullet":"black","level":0},{"text":"Finally, <em>filename.hex<\/em> should be replaced with the filename, which in this case is <tt>flashlight.hex<\/tt>.","text_raw":"Finally, ''filename.hex'' should be replaced with the filename, which in this case is ``flashlight.hex``.","bullet":"black","level":0},{"text":"For example, say you were downloading flashlight.hex onto an ATMega328P at \/dev\/ttyUSB0. You'd type: <tt>avrdude -p m328p -P \/dev\/ttyUSB0 -c stk500v1 -u -U -F flash:w:flashlight.hex<\/tt>","text_raw":"For example, say you were downloading flashlight.hex onto an ATMega328P at \/dev\/ttyUSB0. You'd type: ``avrdude -p m328p -P \/dev\/ttyUSB0 -c stk500v1 -u -U -F flash:w:flashlight.hex``","bullet":"black","level":0}],"object":null,"images":[{"imageid":17664,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/RRsy6TRak6SJZjlP"}],"number":4},{"title":"","lines":[{"text":"All the programming is done!","text_raw":"All the programming is done!","bullet":"black","level":0},{"text":"Simply connect an LED from pin 13 to GND, connect a pull-down resistor (10k) from pin 4 to GND, and connect a wire to GND. Touch the other end of the wire to the part of the resistor closest to pin 4, and the light will turn on. Do it again, and it will turn off. You have completed your first project programming an Arduino in pure C!","text_raw":"Simply connect an LED from pin 13 to GND, connect a pull-down resistor (10k) from pin 4 to GND, and connect a wire to GND. Touch the other end of the wire to the part of the resistor closest to pin 4, and the light will turn on. Do it again, and it will turn off. You have completed your first project programming an Arduino in pure C!","bullet":"black","level":0}],"object":null,"images":[],"number":5}],"subject":"","summary":"In this project, I will teach you how to program an Arduino in pure C. The Arduino language is simply just a small refinement of C making it easier to code. If you've already programmed in C or on the Arduino, that will help you greatly.","time_required":"30 min, approx.","title":"Arduino in C: See Your Microcontroller in a New Way","tools":[{"text":"Computer running Linux","notes":"","url":"http:\/\/makeprojects.com\/Item\/Computer_running_Linux","thumbnail":""},{"text":"USB A to B cable","notes":"","url":"http:\/\/makeprojects.com\/Item\/USB_A_to_B_cable","thumbnail":""}],"type":"project"},"guideid":"965"}