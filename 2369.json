{"device":"Programming","url":"http:\/\/makeprojects.com\/Project\/InterActive+2\/2369\/1","guide":{"author":{"text":"Steven Robert Cypherd","userid":3592},"categories":["Programming","Communications"],"conclusion":"<p>Get them Talking.<\/p>","difficulty":"Moderate","documents":[],"flags":[{"title":"User-Contributed Project","flagid":"GUIDE_USER_CONTRIBUTED","text":"This project guide is not managed by MAKE staff."}],"guideid":2369,"image":{"imageid":46573,"text":"http:\/\/guide-images.makeprojects.org\/igi\/HxT3WTr1Qhf1EF2i"},"introduction":"<p>This is an explanation of the code for the flow control I came up with it to get my Basic Stamp 2(BS2) talking to my Basic Stamp 1(BS1). I am showing the main loops only. For the code files look at letsmakerobots.<wbr \/>com and instructables.c<wbr \/>om. Files or a zip file.<\/p>\n\n<p>In my code I use a lot of Bit flags. Most processors allow access to the Bits of a Byte or Word to use like regular variables. Basic Stamp 1 and most Picaxe processors have defined variable names for the Bits of first few bytes of memory. Usually it is Bit0 \u2013 Bit7 or Bit0 \u2013 B15 or Bit0 \u2013 Bit31 to define a variable. In both of these processors the variable Bits can also be in another variable. Like my lights Byte B0 the Bits are the variables Bit0 \u2013 7 that are lit1 \u2013 lit8 the individual lights. This makes testing of a light easy. \u201cIf lit1 = 1 then litOn\u201d is simple.<\/p>\n\n<p>The Basic Stamp 2 and processors like it use defined subscripting to access the Bits, Nibbles and Bytes of a variable. My individual lights are the variables &quot;lights.Bit0 - Bit7&quot;. In testing a variable Bit is \u201cif lghts.Bit0 = 1 then litOn\u201d. Setting is \u201clitTmp = lights.Bit0\u201d. Usually the subscripts can not be a variable. Look at the program files in the EasyLights article. Read your manual.<\/p>\n\n<p>I fixed as much as I could. The BS1 doesn\u2019t do serial out very well. It is stable and runs like any simple button on a system like this. The BS1 doesn\u2019t do Bits very well either.<\/p>\n\n<p>My flow control is the only way I got these systems to communicate.<\/p>\n\n<p>I uploaded full code pictures.<\/p>","introduction_rendered":"<p>This is an explanation of the code for the flow control I came up with it to get my Basic Stamp 2(BS2) talking to my Basic Stamp 1(BS1). I am showing the main loops only. For the code files look at letsmakerobots.<wbr \/>com and instructables.c<wbr \/>om. Files or a zip file.<\/p>\n\n<p>In my code I use a lot of Bit flags. Most processors allow access to the Bits of a Byte or Word to use like regular variables. Basic Stamp 1 and most Picaxe processors have defined variable names for the Bits of first few bytes of memory. Usually it is Bit0 \u2013 Bit7 or Bit0 \u2013 B15 or Bit0 \u2013 Bit31 to define a variable. In both of these processors the variable Bits can also be in another variable. Like my lights Byte B0 the Bits are the variables Bit0 \u2013 7 that are lit1 \u2013 lit8 the individual lights. This makes testing of a light easy. \u201cIf lit1 = 1 then litOn\u201d is simple.<\/p>\n\n<p>The Basic Stamp 2 and processors like it use defined subscripting to access the Bits, Nibbles and Bytes of a variable. My individual lights are the variables &quot;lights.Bit0 - Bit7&quot;. In testing a variable Bit is \u201cif lghts.Bit0 = 1 then litOn\u201d. Setting is \u201clitTmp = lights.Bit0\u201d. Usually the subscripts can not be a variable. Look at the program files in the EasyLights article. Read your manual.<\/p>\n\n<p>I fixed as much as I could. The BS1 doesn\u2019t do serial out very well. It is stable and runs like any simple button on a system like this. The BS1 doesn\u2019t do Bits very well either.<\/p>\n\n<p>My flow control is the only way I got these systems to communicate.<\/p>\n\n<p>I uploaded full code pictures.<\/p>","locale":"en","parts":[],"prereqs":[],"steps":[{"title":"","lines":[{"text":"Get them talking. Fixed it.","text_raw":"Get them talking. Fixed it.","bullet":"black","level":0},{"text":"Here the the last working version with the BS1. Two bytes in OK, but not one good byte out.","text_raw":"Here the the last working version with the BS1. Two bytes in OK, but not one good byte out.","bullet":"black","level":0},{"text":"Here are the code pictures.","text_raw":"Here are the code pictures.","bullet":"black","level":0}],"object":null,"images":[{"imageid":46573,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/HxT3WTr1Qhf1EF2i"},{"imageid":50478,"orderby":2,"text":"http:\/\/guide-images.makeprojects.org\/igi\/QtUyrbme1c36ktKE"},{"imageid":50479,"orderby":3,"text":"http:\/\/guide-images.makeprojects.org\/igi\/CxhvDt3xYSRVRAeM"}],"number":1},{"title":"","lines":[{"text":"Last page of BS2 I2","text_raw":"Last page of BS2 I2","bullet":"black","level":0},{"text":"BS1 I2 code.","text_raw":"BS1 I2 code.","bullet":"black","level":0}],"object":null,"images":[{"imageid":50471,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/YKOG4ACKQBfBu2g2"},{"imageid":50474,"orderby":2,"text":"http:\/\/guide-images.makeprojects.org\/igi\/TNxW2LtbCx1NekMD"},{"imageid":50475,"orderby":3,"text":"http:\/\/guide-images.makeprojects.org\/igi\/eWkXs62qVNucNOyx"}],"number":2},{"title":"","lines":[{"text":"First working version BS2 I1","text_raw":"First working version BS2 I1","bullet":"black","level":0},{"text":"First working version BS1 I1","text_raw":"First working version BS1 I1","bullet":"black","level":0}],"object":null,"images":[{"imageid":50476,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/GfXFfSCZqx534qVL"},{"imageid":50477,"orderby":2,"text":"http:\/\/guide-images.makeprojects.org\/igi\/sTkX4CGwWggyIsI4"},{"imageid":50472,"orderby":3,"text":"http:\/\/guide-images.makeprojects.org\/igi\/rEVEeyHJrJKvJMqN"}],"number":3},{"title":"","lines":[{"text":"Last page BS1 I1","text_raw":"Last page BS1 I1","bullet":"black","level":0}],"object":null,"images":[{"imageid":50473,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/lXHAwHtELOiBrquP"}],"number":4}],"subject":"","summary":"An explanation of the code for my flow control.","time_required":"1 hour","title":"InterActive 2","tools":[],"type":"project"},"guideid":"2369"}