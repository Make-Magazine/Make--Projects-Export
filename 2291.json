{"device":"Programming","url":"http:\/\/makeprojects.com\/Project\/EasyLights\/2291\/1","guide":{"author":{"text":"Steven Robert Cypherd","userid":3592},"categories":["Programming","Arduino"],"conclusion":"<p>Programming is fun!<\/p>","difficulty":"Moderate","documents":[{"text":"EasyLights.pdf","url":"http:\/\/make-documents.s3.amazonaws.com\/lD4CfDcmQF5CUfNL.pdf","documentid":297}],"flags":[{"title":"User-Contributed Project","flagid":"GUIDE_USER_CONTRIBUTED","text":"This project guide is not managed by MAKE staff."}],"guideid":2291,"image":{"imageid":45418,"text":"http:\/\/guide-images.makeprojects.org\/igi\/4eEsiy3riHc6EQlV"},"introduction":"<p>[raw]I was working on my Picaxe 28x2 robot from <a href=\"http:\/\/letsmakerobots.com\/\" rel=\"nofollow\">http:\/\/letsmakerobots.com\/<\/a> and I wanted lights and I needed more sensors. I had four input pins left. With the 28x2 you can make the pins anything that you need.  I went back to electronics to find some answers. I looked up shift registers on <a href=\"http:\/\/www.jameco.com\/\" rel=\"nofollow\">http:\/\/www.jameco.com\/<\/a> and I bought the latest CD74HC164 serial-in parallel-out. This is why I made Easy Lights. For two pins you get eight lights. Yes, there is a little flicker. It is a shift register. Each time the lights change you have to shift in all eight lights. On slower systems you can use the Master Reset to clear the lights, but it still flickers when loading the lights.<\/p>\n\n<p>For the files please see <a href=\"http:\/\/letsmakerobots.com\" rel=\"nofollow\">http:\/\/letsmakerobots.com<\/a> and <a href=\"http:\/\/instructables.com\" rel=\"nofollow\">http:\/\/instructables.com<\/a> as I complete this article.<\/p>\n\n<div class=\"videoBox_center\" style=\"width:592px;\"><iframe class=\"youtube-player\" type=\"text\/html\" width=\"560\" height=\"315\" src=\"http:\/\/www.youtube.com\/embed\/z7ZAnEUVH5M?wmode=opaque\" frameborder=\"0\"><\/iframe><\/div>\n\n<p>My programs are just a demonstration to show how my light board works. All you need is something like <tt>doLights<\/tt> or <tt>shiftout<\/tt> and maybe <tt>checkLights<\/tt> to run your lights. Programming can be fun. I left some mistakes in my Basic Stamp 1 program (EasyLights1.bs<wbr \/>1) because they are very common mistakes. Look at <tt>tPause<\/tt> and note that it is a byte. When I changed the timing to a variable I put the pause time of 3000 into <tt>tPause<\/tt> and I got gunk out. Why? A byte holds a maximum of 255 in decimal terms. Processors like the Basic Stamps use 16 bits or &quot;word&quot; size for all math operations. When you put 3000 into a byte-size variable you only get the low byte of the word size of 3000. That is 184 decimal or 10111000 in binary. The system tells you nothing for math errors like this. You see something wrong with your program. That is all you get.  This is a good example of a very hard error to find. Even I think that I can\u2019t be that stupid.<\/p>\n\n<p><tt>doLights<\/tt> is an example of programming for a device. A shift register like the CD74HC164 has three inputs (Clock, Data and Master Reset) that control the outputs, which are connected to lights in this case. You set Data to high or low and raise your Clock high, wait and set your Clock low and repeat this for all 8 bits in the register. To clear the lights you can load all 8 lights with Data low or bring Master Reset low, wait and set it high. Master Reset needs to be high for normal operation. Most processors like mine are too slow to necessitate waiting between setting the Clock high and then setting it low.<\/p>\n\n<p><tt>checkLights<\/tt> is my way of efficiently using the bits of each of my lights for easy logical testing. Bits only have two values: 0 for off and 1 for on. <tt>checkLights<\/tt> sets <tt>litTmp<\/tt> to the bit value of each light. This makes testing easy. <tt>If litTmp = 1 then doLitOn<\/tt>. Simple. Most processors give you access to the bits of the first few bytes of memory. If you tested bit 4 of the byte <tt>lights<\/tt> (light #5) you would get 16, the position value of that bit in the byte. Messy, to say the least. Logic operators like <tt>and<\/tt> and <tt>or<\/tt> will give you the bit position value too. In <tt>Larson<\/tt> to set the high bit of lights I set <tt>lights<\/tt> to 128 (the value of bit 7, the high bit in <tt>lights<\/tt>). Binary notation shows how the processor sees your numbers in binary.<\/p>\n\n<ul><li>Position = value<ul><li>Bit 7=128<\/li><li>Bit 6=64<\/li><li>Bit 5=32<\/li><li>Bit 4=16<\/li><li>Bit 3=8<\/li><li>Bit 2=4<\/li><li>Bit 1=2<\/li><li>Bit 0=1<\/li><\/ul><\/li><\/ul>\n\n<ul><li>Examples:<ul><li>Bit 0 + Bit 1 = 3<\/li><li>Bit 2 + bit 0 = 5<\/li><\/ul><\/li><\/ul>\n\n<p>It is hard being a geek because no one ever understands you. I wish I had friends that I could share this with. I know how lost I can get in my projects. Geeks have hearts too and pretty normal lives.<\/p>\n\n<p>Easy Lights would be a great project to teach electronics, programming, processors and making boards. If you are not making money on my ideas then have fun. If you make money then contact me, please.<\/p>\n\n<p>The PDF file contains the circuit board layout.<\/p>","introduction_rendered":"<p>[raw]I was working on my Picaxe 28x2 robot from <a href=\"http:\/\/letsmakerobots.com\/\" rel=\"nofollow\">http:\/\/letsmakerobots.com\/<\/a> and I wanted lights and I needed more sensors. I had four input pins left. With the 28x2 you can make the pins anything that you need.  I went back to electronics to find some answers. I looked up shift registers on <a href=\"http:\/\/www.jameco.com\/\" rel=\"nofollow\">http:\/\/www.jameco.com\/<\/a> and I bought the latest CD74HC164 serial-in parallel-out. This is why I made Easy Lights. For two pins you get eight lights. Yes, there is a little flicker. It is a shift register. Each time the lights change you have to shift in all eight lights. On slower systems you can use the Master Reset to clear the lights, but it still flickers when loading the lights.<\/p>\n\n<p>For the files please see <a href=\"http:\/\/letsmakerobots.com\" rel=\"nofollow\">http:\/\/letsmakerobots.com<\/a> and <a href=\"http:\/\/instructables.com\" rel=\"nofollow\">http:\/\/instructables.com<\/a> as I complete this article.<\/p>\n\n<div class=\"videoBox_center\" style=\"width:592px;\"><iframe class=\"youtube-player\" type=\"text\/html\" width=\"560\" height=\"315\" src=\"http:\/\/www.youtube.com\/embed\/z7ZAnEUVH5M?wmode=opaque\" frameborder=\"0\"><\/iframe><\/div>\n\n<p>My programs are just a demonstration to show how my light board works. All you need is something like <tt>doLights<\/tt> or <tt>shiftout<\/tt> and maybe <tt>checkLights<\/tt> to run your lights. Programming can be fun. I left some mistakes in my Basic Stamp 1 program (EasyLights1.bs<wbr \/>1) because they are very common mistakes. Look at <tt>tPause<\/tt> and note that it is a byte. When I changed the timing to a variable I put the pause time of 3000 into <tt>tPause<\/tt> and I got gunk out. Why? A byte holds a maximum of 255 in decimal terms. Processors like the Basic Stamps use 16 bits or &quot;word&quot; size for all math operations. When you put 3000 into a byte-size variable you only get the low byte of the word size of 3000. That is 184 decimal or 10111000 in binary. The system tells you nothing for math errors like this. You see something wrong with your program. That is all you get.  This is a good example of a very hard error to find. Even I think that I can\u2019t be that stupid.<\/p>\n\n<p><tt>doLights<\/tt> is an example of programming for a device. A shift register like the CD74HC164 has three inputs (Clock, Data and Master Reset) that control the outputs, which are connected to lights in this case. You set Data to high or low and raise your Clock high, wait and set your Clock low and repeat this for all 8 bits in the register. To clear the lights you can load all 8 lights with Data low or bring Master Reset low, wait and set it high. Master Reset needs to be high for normal operation. Most processors like mine are too slow to necessitate waiting between setting the Clock high and then setting it low.<\/p>\n\n<p><tt>checkLights<\/tt> is my way of efficiently using the bits of each of my lights for easy logical testing. Bits only have two values: 0 for off and 1 for on. <tt>checkLights<\/tt> sets <tt>litTmp<\/tt> to the bit value of each light. This makes testing easy. <tt>If litTmp = 1 then doLitOn<\/tt>. Simple. Most processors give you access to the bits of the first few bytes of memory. If you tested bit 4 of the byte <tt>lights<\/tt> (light #5) you would get 16, the position value of that bit in the byte. Messy, to say the least. Logic operators like <tt>and<\/tt> and <tt>or<\/tt> will give you the bit position value too. In <tt>Larson<\/tt> to set the high bit of lights I set <tt>lights<\/tt> to 128 (the value of bit 7, the high bit in <tt>lights<\/tt>). Binary notation shows how the processor sees your numbers in binary.<\/p>\n\n<ul><li>Position = value<ul><li>Bit 7=128<\/li><li>Bit 6=64<\/li><li>Bit 5=32<\/li><li>Bit 4=16<\/li><li>Bit 3=8<\/li><li>Bit 2=4<\/li><li>Bit 1=2<\/li><li>Bit 0=1<\/li><\/ul><\/li><\/ul>\n\n<ul><li>Examples:<ul><li>Bit 0 + Bit 1 = 3<\/li><li>Bit 2 + bit 0 = 5<\/li><\/ul><\/li><\/ul>\n\n<p>It is hard being a geek because no one ever understands you. I wish I had friends that I could share this with. I know how lost I can get in my projects. Geeks have hearts too and pretty normal lives.<\/p>\n\n<p>Easy Lights would be a great project to teach electronics, programming, processors and making boards. If you are not making money on my ideas then have fun. If you make money then contact me, please.<\/p>\n\n<p>The PDF file contains the circuit board layout.<\/p>","locale":"en","parts":[],"prereqs":[],"steps":[{"title":"","lines":[{"text":"You can use these processors and programs to run my EasyLights:","text_raw":"You can use these processors and programs to run my EasyLights:","bullet":"black","level":0},{"text":"The Basic Stamp 1 version has a button and three modes: Larson, Binary and Random. I have an old original Basic Stamp 1 that I just bought a new carrier board for and a new Basic Stamp 1 project board.","text_raw":"The Basic Stamp 1 version has a button and three modes: Larson, Binary and Random. I have an old original Basic Stamp 1 that I just bought a new carrier board for and a new Basic Stamp 1 project board.","bullet":"black","level":0},{"text":"<strong>EasyLights1.bs1<\/strong>: Shows a couple of errors. See what you can find.","text_raw":"'''EasyLights1.bs1''': Shows a couple of errors. See what you can find.","bullet":"black","level":0},{"text":"<strong>EasyLights2.bs1<\/strong>: Fixed everything, I think. Used <tt>pause 1000<\/tt>. Added random numbers.","text_raw":"'''EasyLights2.bs1''': Fixed everything, I think. Used ``pause 1000``. Added random numbers.","bullet":"black","level":0}],"object":null,"images":[{"imageid":45418,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/4eEsiy3riHc6EQlV"},{"imageid":45419,"orderby":2,"text":"http:\/\/guide-images.makeprojects.org\/igi\/VSGZfJJg3ZkaVjOW"},{"imageid":45421,"orderby":3,"text":"http:\/\/guide-images.makeprojects.org\/igi\/YvxUcfdHZmZhKmCD"}],"number":1},{"title":"","lines":[{"text":"EasyLights is easy to use and hook up.","text_raw":"EasyLights is easy to use and hook up.","bullet":"black","level":0},{"text":"The Basic Stamp 2 version has a button and three modes: Larson, Binary and Random. Plus, I run the &quot;overstuffing a byte&quot; error using the debug terminal. I will try to add a speed button. I have an old original Basic Stamp 2 that I upgraded its super carrier board with new headers and a cute mini breadboard. I also have two Sumo Bot Basic Stamp 2s that I am working on. I also have a Basic stamp 2 project board that is great for learning Basic Stamp 2 programming.","text_raw":"The Basic Stamp 2 version has a button and three modes: Larson, Binary and Random. Plus, I run the \"overstuffing a byte\" error using the debug terminal. I will try to add a speed button. I have an old original Basic Stamp 2 that I upgraded its super carrier board with new headers and a cute mini breadboard. I also have two Sumo Bot Basic Stamp 2s that I am working on. I also have a Basic stamp 2 project board that is great for learning Basic Stamp 2 programming.","bullet":"black","level":0},{"text":"<strong>EasyLights2.bs2<\/strong>: Getting started","text_raw":"'''EasyLights2.bs2''': Getting started","bullet":"black","level":0},{"text":"<strong>EasyLights3.bs2<\/strong>: Basics are done: Button, Larson, Binary and Random modes.","text_raw":"'''EasyLights3.bs2''': Basics are done: Button, Larson, Binary and Random modes.","bullet":"black","level":0},{"text":"<strong>EasyLights4.bs2<\/strong>: Added the &quot;overstuffing a byte&quot; error.","text_raw":"'''EasyLights4.bs2''': Added the \"overstuffing a byte\" error.","bullet":"black","level":0},{"text":"<strong>EasyLights5.bs2<\/strong>:  Added a flag to turn off &quot;overstuffing a byte&quot;. Fixed Binary mode.","text_raw":"'''EasyLights5.bs2''':  Added a flag to turn off \"overstuffing a byte\". Fixed Binary mode.","bullet":"black","level":0}],"object":null,"images":[{"imageid":45420,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/Njf5BUHJPjxJIxea"},{"imageid":45422,"orderby":2,"text":"http:\/\/guide-images.makeprojects.org\/igi\/ITyVKILO4vQsvxES"},{"imageid":45423,"orderby":3,"text":"http:\/\/guide-images.makeprojects.org\/igi\/6lJVH3rRIW6Sl4Qy"}],"number":2},{"title":"","lines":[{"text":"Running EasyLights:","text_raw":"Running EasyLights:","bullet":"black","level":0},{"text":"The Picaxe 28x2 version has two buttons: mode and speed. Modes are Larson, Binary and Random. This is where Easy Lights comes from. I am making a lights plus analogue board for my robot from <a href=\"http:\/\/letsmakerobots.com\" rel=\"nofollow\">http:\/\/letsmakerobots.com<\/a>. This is a perfect starter robot for anyone. You get the Picaxe 28 board with an L293 motor driver chip, two right-angle motors with large wheels. a Sharp GP2D12 Infrared range finder and one full-size servo. There are tons of ideas on the web site.","text_raw":"The Picaxe 28x2 version has two buttons: mode and speed. Modes are Larson, Binary and Random. This is where Easy Lights comes from. I am making a lights plus analogue board for my robot from http:\/\/letsmakerobots.com. This is a perfect starter robot for anyone. You get the Picaxe 28 board with an L293 motor driver chip, two right-angle motors with large wheels. a Sharp GP2D12 Infrared range finder and one full-size servo. There are tons of ideas on the web site.","bullet":"black","level":0},{"text":"<strong>easyLights1.bas<\/strong>: This program runs on the Picaxe.","text_raw":"'''easyLights1.bas''': This program runs on the Picaxe.","bullet":"black","level":0}],"object":null,"images":[{"imageid":45424,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/vCScPNtipGDHmmdU"},{"imageid":45425,"orderby":2,"text":"http:\/\/guide-images.makeprojects.org\/igi\/WpKDajYy6VVkdGKg"},{"imageid":45426,"orderby":3,"text":"http:\/\/guide-images.makeprojects.org\/igi\/arRUMGckOomUOjNX"}],"number":3},{"title":"","lines":[{"text":"Last is the Arduino Uno with a Maker Shield and one button running Binary, Larson and Random modes. I got my Arduino at the <a href=\"http:\/\/makezine.com\">http:\/\/makezine.com<\/a>. I got a full kit with electronic parts, <em>How to Program Arduino<\/em> book and a Maker Shield to build. I love C and that is what you program the Arduinos with. Note: The file extension has changed to .ino with the new Arduino environment. It will still open .pde files but it only saves as .ino files. This is my favorite system.","text_raw":"Last is the Arduino Uno with a Maker Shield and one button running Binary, Larson and Random modes. I got my Arduino at the [http:\/\/makezine.com]. I got a full kit with electronic parts, ''How to Program Arduino'' book and a Maker Shield to build. I love C and that is what you program the Arduinos with. Note: The file extension has changed to .ino with the new Arduino environment. It will still open .pde files but it only saves as .ino files. This is my favorite system.","bullet":"black","level":0},{"text":"<strong>easyLights1.ino<\/strong>: Getting started","text_raw":"'''easyLights1.ino''': Getting started","bullet":"black","level":0},{"text":"<strong>easyLights2.ino<\/strong>: Cleaned it up and added a subroutine for Larson mode. I use the <tt>shiftout<\/tt> function. Perfect for a shift register. Fun.","text_raw":"'''easyLights2.ino''': Cleaned it up and added a subroutine for Larson mode. I use the ``shiftout`` function. Perfect for a shift register. Fun.","bullet":"black","level":0},{"text":"Making boards is so easy now. Last picture lower right is making twisted cables.","text_raw":"Making boards is so easy now. Last picture lower right is making twisted cables.","bullet":"black","level":0}],"object":null,"images":[{"imageid":45417,"orderby":1,"text":"http:\/\/guide-images.makeprojects.org\/igi\/3Z5jFuIB5qYsDYgd"}],"number":4}],"subject":"","summary":"Running eight LEDs with two pins, Clock and Data, using a CD74HC164 serial-in parallel-out shift register.","time_required":"1 hour","title":"EasyLights","tools":[],"type":"project"},"guideid":"2291"}